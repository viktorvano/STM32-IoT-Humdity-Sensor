
STM32F103C8T6_IoT_Humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  08004ff4  08004ff4  00014ff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005218  08005218  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08005218  08005218  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005218  08005218  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005218  08005218  00015218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800521c  0800521c  0001521c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  20000078  08005298  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009bc  08005298  000209bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001170f  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023e0  00000000  00000000  000317b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00033b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  00034ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188e0  00000000  00000000  00035960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011440  00000000  00000000  0004e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d563  00000000  00000000  0005f680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ecbe3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044fc  00000000  00000000  000ecc38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004fdc 	.word	0x08004fdc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004fdc 	.word	0x08004fdc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_frsub>:
 800015c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__addsf3>
 8000162:	bf00      	nop

08000164 <__aeabi_fsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000168 <__addsf3>:
 8000168:	0042      	lsls	r2, r0, #1
 800016a:	bf1f      	itttt	ne
 800016c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000170:	ea92 0f03 	teqne	r2, r3
 8000174:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000178:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800017c:	d06a      	beq.n	8000254 <__addsf3+0xec>
 800017e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000182:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000186:	bfc1      	itttt	gt
 8000188:	18d2      	addgt	r2, r2, r3
 800018a:	4041      	eorgt	r1, r0
 800018c:	4048      	eorgt	r0, r1
 800018e:	4041      	eorgt	r1, r0
 8000190:	bfb8      	it	lt
 8000192:	425b      	neglt	r3, r3
 8000194:	2b19      	cmp	r3, #25
 8000196:	bf88      	it	hi
 8000198:	4770      	bxhi	lr
 800019a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800019e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4240      	negne	r0, r0
 80001aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001b6:	bf18      	it	ne
 80001b8:	4249      	negne	r1, r1
 80001ba:	ea92 0f03 	teq	r2, r3
 80001be:	d03f      	beq.n	8000240 <__addsf3+0xd8>
 80001c0:	f1a2 0201 	sub.w	r2, r2, #1
 80001c4:	fa41 fc03 	asr.w	ip, r1, r3
 80001c8:	eb10 000c 	adds.w	r0, r0, ip
 80001cc:	f1c3 0320 	rsb	r3, r3, #32
 80001d0:	fa01 f103 	lsl.w	r1, r1, r3
 80001d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001d8:	d502      	bpl.n	80001e0 <__addsf3+0x78>
 80001da:	4249      	negs	r1, r1
 80001dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001e4:	d313      	bcc.n	800020e <__addsf3+0xa6>
 80001e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001ea:	d306      	bcc.n	80001fa <__addsf3+0x92>
 80001ec:	0840      	lsrs	r0, r0, #1
 80001ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80001f2:	f102 0201 	add.w	r2, r2, #1
 80001f6:	2afe      	cmp	r2, #254	; 0xfe
 80001f8:	d251      	bcs.n	800029e <__addsf3+0x136>
 80001fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000202:	bf08      	it	eq
 8000204:	f020 0001 	biceq.w	r0, r0, #1
 8000208:	ea40 0003 	orr.w	r0, r0, r3
 800020c:	4770      	bx	lr
 800020e:	0049      	lsls	r1, r1, #1
 8000210:	eb40 0000 	adc.w	r0, r0, r0
 8000214:	3a01      	subs	r2, #1
 8000216:	bf28      	it	cs
 8000218:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800021c:	d2ed      	bcs.n	80001fa <__addsf3+0x92>
 800021e:	fab0 fc80 	clz	ip, r0
 8000222:	f1ac 0c08 	sub.w	ip, ip, #8
 8000226:	ebb2 020c 	subs.w	r2, r2, ip
 800022a:	fa00 f00c 	lsl.w	r0, r0, ip
 800022e:	bfaa      	itet	ge
 8000230:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000234:	4252      	neglt	r2, r2
 8000236:	4318      	orrge	r0, r3
 8000238:	bfbc      	itt	lt
 800023a:	40d0      	lsrlt	r0, r2
 800023c:	4318      	orrlt	r0, r3
 800023e:	4770      	bx	lr
 8000240:	f092 0f00 	teq	r2, #0
 8000244:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000248:	bf06      	itte	eq
 800024a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800024e:	3201      	addeq	r2, #1
 8000250:	3b01      	subne	r3, #1
 8000252:	e7b5      	b.n	80001c0 <__addsf3+0x58>
 8000254:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000258:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800025c:	bf18      	it	ne
 800025e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000262:	d021      	beq.n	80002a8 <__addsf3+0x140>
 8000264:	ea92 0f03 	teq	r2, r3
 8000268:	d004      	beq.n	8000274 <__addsf3+0x10c>
 800026a:	f092 0f00 	teq	r2, #0
 800026e:	bf08      	it	eq
 8000270:	4608      	moveq	r0, r1
 8000272:	4770      	bx	lr
 8000274:	ea90 0f01 	teq	r0, r1
 8000278:	bf1c      	itt	ne
 800027a:	2000      	movne	r0, #0
 800027c:	4770      	bxne	lr
 800027e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000282:	d104      	bne.n	800028e <__addsf3+0x126>
 8000284:	0040      	lsls	r0, r0, #1
 8000286:	bf28      	it	cs
 8000288:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800028c:	4770      	bx	lr
 800028e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000292:	bf3c      	itt	cc
 8000294:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000298:	4770      	bxcc	lr
 800029a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800029e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002a6:	4770      	bx	lr
 80002a8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002ac:	bf16      	itet	ne
 80002ae:	4608      	movne	r0, r1
 80002b0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002b4:	4601      	movne	r1, r0
 80002b6:	0242      	lsls	r2, r0, #9
 80002b8:	bf06      	itte	eq
 80002ba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002be:	ea90 0f01 	teqeq	r0, r1
 80002c2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_ui2f>:
 80002c8:	f04f 0300 	mov.w	r3, #0
 80002cc:	e004      	b.n	80002d8 <__aeabi_i2f+0x8>
 80002ce:	bf00      	nop

080002d0 <__aeabi_i2f>:
 80002d0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002d4:	bf48      	it	mi
 80002d6:	4240      	negmi	r0, r0
 80002d8:	ea5f 0c00 	movs.w	ip, r0
 80002dc:	bf08      	it	eq
 80002de:	4770      	bxeq	lr
 80002e0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002e4:	4601      	mov	r1, r0
 80002e6:	f04f 0000 	mov.w	r0, #0
 80002ea:	e01c      	b.n	8000326 <__aeabi_l2f+0x2a>

080002ec <__aeabi_ul2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f04f 0300 	mov.w	r3, #0
 80002f8:	e00a      	b.n	8000310 <__aeabi_l2f+0x14>
 80002fa:	bf00      	nop

080002fc <__aeabi_l2f>:
 80002fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000300:	bf08      	it	eq
 8000302:	4770      	bxeq	lr
 8000304:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000308:	d502      	bpl.n	8000310 <__aeabi_l2f+0x14>
 800030a:	4240      	negs	r0, r0
 800030c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000310:	ea5f 0c01 	movs.w	ip, r1
 8000314:	bf02      	ittt	eq
 8000316:	4684      	moveq	ip, r0
 8000318:	4601      	moveq	r1, r0
 800031a:	2000      	moveq	r0, #0
 800031c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000320:	bf08      	it	eq
 8000322:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000326:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800032a:	fabc f28c 	clz	r2, ip
 800032e:	3a08      	subs	r2, #8
 8000330:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000334:	db10      	blt.n	8000358 <__aeabi_l2f+0x5c>
 8000336:	fa01 fc02 	lsl.w	ip, r1, r2
 800033a:	4463      	add	r3, ip
 800033c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000340:	f1c2 0220 	rsb	r2, r2, #32
 8000344:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000348:	fa20 f202 	lsr.w	r2, r0, r2
 800034c:	eb43 0002 	adc.w	r0, r3, r2
 8000350:	bf08      	it	eq
 8000352:	f020 0001 	biceq.w	r0, r0, #1
 8000356:	4770      	bx	lr
 8000358:	f102 0220 	add.w	r2, r2, #32
 800035c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000368:	fa21 f202 	lsr.w	r2, r1, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000376:	4770      	bx	lr

08000378 <__aeabi_fmul>:
 8000378:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800037c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000380:	bf1e      	ittt	ne
 8000382:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000386:	ea92 0f0c 	teqne	r2, ip
 800038a:	ea93 0f0c 	teqne	r3, ip
 800038e:	d06f      	beq.n	8000470 <__aeabi_fmul+0xf8>
 8000390:	441a      	add	r2, r3
 8000392:	ea80 0c01 	eor.w	ip, r0, r1
 8000396:	0240      	lsls	r0, r0, #9
 8000398:	bf18      	it	ne
 800039a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800039e:	d01e      	beq.n	80003de <__aeabi_fmul+0x66>
 80003a0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80003a4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003a8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003ac:	fba0 3101 	umull	r3, r1, r0, r1
 80003b0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003b4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003b8:	bf3e      	ittt	cc
 80003ba:	0049      	lslcc	r1, r1, #1
 80003bc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003c0:	005b      	lslcc	r3, r3, #1
 80003c2:	ea40 0001 	orr.w	r0, r0, r1
 80003c6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ca:	2afd      	cmp	r2, #253	; 0xfd
 80003cc:	d81d      	bhi.n	800040a <__aeabi_fmul+0x92>
 80003ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003d2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003d6:	bf08      	it	eq
 80003d8:	f020 0001 	biceq.w	r0, r0, #1
 80003dc:	4770      	bx	lr
 80003de:	f090 0f00 	teq	r0, #0
 80003e2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003e6:	bf08      	it	eq
 80003e8:	0249      	lsleq	r1, r1, #9
 80003ea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003ee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003f2:	3a7f      	subs	r2, #127	; 0x7f
 80003f4:	bfc2      	ittt	gt
 80003f6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003fa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003fe:	4770      	bxgt	lr
 8000400:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000404:	f04f 0300 	mov.w	r3, #0
 8000408:	3a01      	subs	r2, #1
 800040a:	dc5d      	bgt.n	80004c8 <__aeabi_fmul+0x150>
 800040c:	f112 0f19 	cmn.w	r2, #25
 8000410:	bfdc      	itt	le
 8000412:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000416:	4770      	bxle	lr
 8000418:	f1c2 0200 	rsb	r2, r2, #0
 800041c:	0041      	lsls	r1, r0, #1
 800041e:	fa21 f102 	lsr.w	r1, r1, r2
 8000422:	f1c2 0220 	rsb	r2, r2, #32
 8000426:	fa00 fc02 	lsl.w	ip, r0, r2
 800042a:	ea5f 0031 	movs.w	r0, r1, rrx
 800042e:	f140 0000 	adc.w	r0, r0, #0
 8000432:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000436:	bf08      	it	eq
 8000438:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800043c:	4770      	bx	lr
 800043e:	f092 0f00 	teq	r2, #0
 8000442:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000446:	bf02      	ittt	eq
 8000448:	0040      	lsleq	r0, r0, #1
 800044a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800044e:	3a01      	subeq	r2, #1
 8000450:	d0f9      	beq.n	8000446 <__aeabi_fmul+0xce>
 8000452:	ea40 000c 	orr.w	r0, r0, ip
 8000456:	f093 0f00 	teq	r3, #0
 800045a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800045e:	bf02      	ittt	eq
 8000460:	0049      	lsleq	r1, r1, #1
 8000462:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000466:	3b01      	subeq	r3, #1
 8000468:	d0f9      	beq.n	800045e <__aeabi_fmul+0xe6>
 800046a:	ea41 010c 	orr.w	r1, r1, ip
 800046e:	e78f      	b.n	8000390 <__aeabi_fmul+0x18>
 8000470:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000474:	ea92 0f0c 	teq	r2, ip
 8000478:	bf18      	it	ne
 800047a:	ea93 0f0c 	teqne	r3, ip
 800047e:	d00a      	beq.n	8000496 <__aeabi_fmul+0x11e>
 8000480:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000484:	bf18      	it	ne
 8000486:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800048a:	d1d8      	bne.n	800043e <__aeabi_fmul+0xc6>
 800048c:	ea80 0001 	eor.w	r0, r0, r1
 8000490:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000494:	4770      	bx	lr
 8000496:	f090 0f00 	teq	r0, #0
 800049a:	bf17      	itett	ne
 800049c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80004a0:	4608      	moveq	r0, r1
 80004a2:	f091 0f00 	teqne	r1, #0
 80004a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80004aa:	d014      	beq.n	80004d6 <__aeabi_fmul+0x15e>
 80004ac:	ea92 0f0c 	teq	r2, ip
 80004b0:	d101      	bne.n	80004b6 <__aeabi_fmul+0x13e>
 80004b2:	0242      	lsls	r2, r0, #9
 80004b4:	d10f      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004b6:	ea93 0f0c 	teq	r3, ip
 80004ba:	d103      	bne.n	80004c4 <__aeabi_fmul+0x14c>
 80004bc:	024b      	lsls	r3, r1, #9
 80004be:	bf18      	it	ne
 80004c0:	4608      	movne	r0, r1
 80004c2:	d108      	bne.n	80004d6 <__aeabi_fmul+0x15e>
 80004c4:	ea80 0001 	eor.w	r0, r0, r1
 80004c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004d4:	4770      	bx	lr
 80004d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004de:	4770      	bx	lr

080004e0 <__aeabi_fdiv>:
 80004e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004e8:	bf1e      	ittt	ne
 80004ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004ee:	ea92 0f0c 	teqne	r2, ip
 80004f2:	ea93 0f0c 	teqne	r3, ip
 80004f6:	d069      	beq.n	80005cc <__aeabi_fdiv+0xec>
 80004f8:	eba2 0203 	sub.w	r2, r2, r3
 80004fc:	ea80 0c01 	eor.w	ip, r0, r1
 8000500:	0249      	lsls	r1, r1, #9
 8000502:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000506:	d037      	beq.n	8000578 <__aeabi_fdiv+0x98>
 8000508:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800050c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000510:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000514:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000518:	428b      	cmp	r3, r1
 800051a:	bf38      	it	cc
 800051c:	005b      	lslcc	r3, r3, #1
 800051e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000522:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000526:	428b      	cmp	r3, r1
 8000528:	bf24      	itt	cs
 800052a:	1a5b      	subcs	r3, r3, r1
 800052c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000530:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000534:	bf24      	itt	cs
 8000536:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800053a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800053e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000542:	bf24      	itt	cs
 8000544:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000548:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800054c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000550:	bf24      	itt	cs
 8000552:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000556:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	bf18      	it	ne
 800055e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000562:	d1e0      	bne.n	8000526 <__aeabi_fdiv+0x46>
 8000564:	2afd      	cmp	r2, #253	; 0xfd
 8000566:	f63f af50 	bhi.w	800040a <__aeabi_fmul+0x92>
 800056a:	428b      	cmp	r3, r1
 800056c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000570:	bf08      	it	eq
 8000572:	f020 0001 	biceq.w	r0, r0, #1
 8000576:	4770      	bx	lr
 8000578:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800057c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000580:	327f      	adds	r2, #127	; 0x7f
 8000582:	bfc2      	ittt	gt
 8000584:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000588:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800058c:	4770      	bxgt	lr
 800058e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000592:	f04f 0300 	mov.w	r3, #0
 8000596:	3a01      	subs	r2, #1
 8000598:	e737      	b.n	800040a <__aeabi_fmul+0x92>
 800059a:	f092 0f00 	teq	r2, #0
 800059e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80005a2:	bf02      	ittt	eq
 80005a4:	0040      	lsleq	r0, r0, #1
 80005a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80005aa:	3a01      	subeq	r2, #1
 80005ac:	d0f9      	beq.n	80005a2 <__aeabi_fdiv+0xc2>
 80005ae:	ea40 000c 	orr.w	r0, r0, ip
 80005b2:	f093 0f00 	teq	r3, #0
 80005b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005ba:	bf02      	ittt	eq
 80005bc:	0049      	lsleq	r1, r1, #1
 80005be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005c2:	3b01      	subeq	r3, #1
 80005c4:	d0f9      	beq.n	80005ba <__aeabi_fdiv+0xda>
 80005c6:	ea41 010c 	orr.w	r1, r1, ip
 80005ca:	e795      	b.n	80004f8 <__aeabi_fdiv+0x18>
 80005cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005d0:	ea92 0f0c 	teq	r2, ip
 80005d4:	d108      	bne.n	80005e8 <__aeabi_fdiv+0x108>
 80005d6:	0242      	lsls	r2, r0, #9
 80005d8:	f47f af7d 	bne.w	80004d6 <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	f47f af70 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e776      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005e8:	ea93 0f0c 	teq	r3, ip
 80005ec:	d104      	bne.n	80005f8 <__aeabi_fdiv+0x118>
 80005ee:	024b      	lsls	r3, r1, #9
 80005f0:	f43f af4c 	beq.w	800048c <__aeabi_fmul+0x114>
 80005f4:	4608      	mov	r0, r1
 80005f6:	e76e      	b.n	80004d6 <__aeabi_fmul+0x15e>
 80005f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005fc:	bf18      	it	ne
 80005fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000602:	d1ca      	bne.n	800059a <__aeabi_fdiv+0xba>
 8000604:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000608:	f47f af5c 	bne.w	80004c4 <__aeabi_fmul+0x14c>
 800060c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000610:	f47f af3c 	bne.w	800048c <__aeabi_fmul+0x114>
 8000614:	e75f      	b.n	80004d6 <__aeabi_fmul+0x15e>
 8000616:	bf00      	nop

08000618 <__aeabi_f2iz>:
 8000618:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800061c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000620:	d30f      	bcc.n	8000642 <__aeabi_f2iz+0x2a>
 8000622:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000626:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800062a:	d90d      	bls.n	8000648 <__aeabi_f2iz+0x30>
 800062c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000630:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000634:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000638:	fa23 f002 	lsr.w	r0, r3, r2
 800063c:	bf18      	it	ne
 800063e:	4240      	negne	r0, r0
 8000640:	4770      	bx	lr
 8000642:	f04f 0000 	mov.w	r0, #0
 8000646:	4770      	bx	lr
 8000648:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800064c:	d101      	bne.n	8000652 <__aeabi_f2iz+0x3a>
 800064e:	0242      	lsls	r2, r0, #9
 8000650:	d105      	bne.n	800065e <__aeabi_f2iz+0x46>
 8000652:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000656:	bf08      	it	eq
 8000658:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800065c:	4770      	bx	lr
 800065e:	f04f 0000 	mov.w	r0, #0
 8000662:	4770      	bx	lr

08000664 <AHT15_init>:

float AHT15_relative_humidity = -100.0f, AHT15_temperature = -100.0f;
uint8_t measure_humidity = 0;

void AHT15_init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af02      	add	r7, sp, #8
	uint8_t init = AHT15_initialization;
 800066a:	23e1      	movs	r3, #225	; 0xe1
 800066c:	71fb      	strb	r3, [r7, #7]
	HAL_Delay(25);//needs 20 ms for i2c to stabilize after power up
 800066e:	2019      	movs	r0, #25
 8000670:	f000 ff64 	bl	800153c <HAL_Delay>
	LED_ON;
 8000674:	2200      	movs	r2, #0
 8000676:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800067a:	480a      	ldr	r0, [pc, #40]	; (80006a4 <AHT15_init+0x40>)
 800067c:	f001 fac4 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_I2C_Master_Transmit(&hi2c1, AHT15_device_address | I2C_write, &init, 1, 50);
 8000680:	1dfa      	adds	r2, r7, #7
 8000682:	2332      	movs	r3, #50	; 0x32
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	2170      	movs	r1, #112	; 0x70
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <AHT15_init+0x44>)
 800068c:	f001 fc18 	bl	8001ec0 <HAL_I2C_Master_Transmit>
	LED_OFF;
 8000690:	2201      	movs	r2, #1
 8000692:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000696:	4803      	ldr	r0, [pc, #12]	; (80006a4 <AHT15_init+0x40>)
 8000698:	f001 fab6 	bl	8001c08 <HAL_GPIO_WritePin>
}
 800069c:	bf00      	nop
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40011000 	.word	0x40011000
 80006a8:	20000880 	.word	0x20000880

080006ac <AHT15_reset>:

void AHT15_reset()
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af02      	add	r7, sp, #8
	uint8_t reset = AHT15_soft_reset;
 80006b2:	23ba      	movs	r3, #186	; 0xba
 80006b4:	71fb      	strb	r3, [r7, #7]
	LED_ON;
 80006b6:	2200      	movs	r2, #0
 80006b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <AHT15_reset+0x40>)
 80006be:	f001 faa3 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_I2C_Master_Transmit(&hi2c1, AHT15_device_address | I2C_write, &reset, 1, 50);
 80006c2:	1dfa      	adds	r2, r7, #7
 80006c4:	2332      	movs	r3, #50	; 0x32
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2301      	movs	r3, #1
 80006ca:	2170      	movs	r1, #112	; 0x70
 80006cc:	4808      	ldr	r0, [pc, #32]	; (80006f0 <AHT15_reset+0x44>)
 80006ce:	f001 fbf7 	bl	8001ec0 <HAL_I2C_Master_Transmit>
	LED_OFF;
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4804      	ldr	r0, [pc, #16]	; (80006ec <AHT15_reset+0x40>)
 80006da:	f001 fa95 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_Delay(25);//takes some time to reset
 80006de:	2019      	movs	r0, #25
 80006e0:	f000 ff2c 	bl	800153c <HAL_Delay>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40011000 	.word	0x40011000
 80006f0:	20000880 	.word	0x20000880

080006f4 <AHT15_read_data>:

void AHT15_read_data()
{
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b08b      	sub	sp, #44	; 0x2c
 80006f8:	af02      	add	r7, sp, #8
	uint8_t data[3] = { AHT15_measurement_trigger, 0b00110011, 0b00000000 };
 80006fa:	4a4d      	ldr	r2, [pc, #308]	; (8000830 <AHT15_read_data+0x13c>)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	6812      	ldr	r2, [r2, #0]
 8000702:	4611      	mov	r1, r2
 8000704:	8019      	strh	r1, [r3, #0]
 8000706:	3302      	adds	r3, #2
 8000708:	0c12      	lsrs	r2, r2, #16
 800070a:	701a      	strb	r2, [r3, #0]
	uint8_t received_data[6];
	LED_ON;
 800070c:	2200      	movs	r2, #0
 800070e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000712:	4848      	ldr	r0, [pc, #288]	; (8000834 <AHT15_read_data+0x140>)
 8000714:	f001 fa78 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_I2C_Master_Transmit(&hi2c1, AHT15_device_address | I2C_write, &data[0], 3, 50);
 8000718:	f107 020c 	add.w	r2, r7, #12
 800071c:	2332      	movs	r3, #50	; 0x32
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	2303      	movs	r3, #3
 8000722:	2170      	movs	r1, #112	; 0x70
 8000724:	4844      	ldr	r0, [pc, #272]	; (8000838 <AHT15_read_data+0x144>)
 8000726:	f001 fbcb 	bl	8001ec0 <HAL_I2C_Master_Transmit>
	LED_OFF;
 800072a:	2201      	movs	r2, #1
 800072c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000730:	4840      	ldr	r0, [pc, #256]	; (8000834 <AHT15_read_data+0x140>)
 8000732:	f001 fa69 	bl	8001c08 <HAL_GPIO_WritePin>
	uint8_t attempts = 5;
 8000736:	2305      	movs	r3, #5
 8000738:	77fb      	strb	r3, [r7, #31]
	do{
		attempts--;
 800073a:	7ffb      	ldrb	r3, [r7, #31]
 800073c:	3b01      	subs	r3, #1
 800073e:	77fb      	strb	r3, [r7, #31]
		HAL_Delay(200);//measurement takes 75 ms
 8000740:	20c8      	movs	r0, #200	; 0xc8
 8000742:	f000 fefb 	bl	800153c <HAL_Delay>
		LED_ON;
 8000746:	2200      	movs	r2, #0
 8000748:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800074c:	4839      	ldr	r0, [pc, #228]	; (8000834 <AHT15_read_data+0x140>)
 800074e:	f001 fa5b 	bl	8001c08 <HAL_GPIO_WritePin>
		HAL_I2C_Master_Receive(&hi2c1, AHT15_device_address | I2C_read, &received_data[0], 6, 50);
 8000752:	1d3a      	adds	r2, r7, #4
 8000754:	2332      	movs	r3, #50	; 0x32
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2306      	movs	r3, #6
 800075a:	2171      	movs	r1, #113	; 0x71
 800075c:	4836      	ldr	r0, [pc, #216]	; (8000838 <AHT15_read_data+0x144>)
 800075e:	f001 fcad 	bl	80020bc <HAL_I2C_Master_Receive>
		LED_OFF;
 8000762:	2201      	movs	r2, #1
 8000764:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000768:	4832      	ldr	r0, [pc, #200]	; (8000834 <AHT15_read_data+0x140>)
 800076a:	f001 fa4d 	bl	8001c08 <HAL_GPIO_WritePin>
	}while((received_data[5] & 0b10000000) == 128 && attempts > 0);
 800076e:	7a7b      	ldrb	r3, [r7, #9]
 8000770:	b25b      	sxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	da02      	bge.n	800077c <AHT15_read_data+0x88>
 8000776:	7ffb      	ldrb	r3, [r7, #31]
 8000778:	2b00      	cmp	r3, #0
 800077a:	d1de      	bne.n	800073a <AHT15_read_data+0x46>


	if((received_data[5] & 0b10000000) == 0)
 800077c:	7a7b      	ldrb	r3, [r7, #9]
 800077e:	b25b      	sxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	db46      	blt.n	8000812 <AHT15_read_data+0x11e>
	{
		const uint32_t constant = 1048576;
 8000784:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000788:	61bb      	str	r3, [r7, #24]

		uint32_t humidity_bytes = (((uint32_t)received_data[4]) << 12) + (((uint32_t)received_data[3]) << 4) + (((uint32_t)received_data[2] & 0b11110000) >> 4);
 800078a:	7a3b      	ldrb	r3, [r7, #8]
 800078c:	031a      	lsls	r2, r3, #12
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	011b      	lsls	r3, r3, #4
 8000792:	4413      	add	r3, r2
 8000794:	79ba      	ldrb	r2, [r7, #6]
 8000796:	0912      	lsrs	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	4413      	add	r3, r2
 800079c:	617b      	str	r3, [r7, #20]
		AHT15_relative_humidity = ((float)humidity_bytes / (float)constant) * 100.0f;
 800079e:	6978      	ldr	r0, [r7, #20]
 80007a0:	f7ff fd92 	bl	80002c8 <__aeabi_ui2f>
 80007a4:	4604      	mov	r4, r0
 80007a6:	69b8      	ldr	r0, [r7, #24]
 80007a8:	f7ff fd8e 	bl	80002c8 <__aeabi_ui2f>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4619      	mov	r1, r3
 80007b0:	4620      	mov	r0, r4
 80007b2:	f7ff fe95 	bl	80004e0 <__aeabi_fdiv>
 80007b6:	4603      	mov	r3, r0
 80007b8:	4920      	ldr	r1, [pc, #128]	; (800083c <AHT15_read_data+0x148>)
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fddc 	bl	8000378 <__aeabi_fmul>
 80007c0:	4603      	mov	r3, r0
 80007c2:	461a      	mov	r2, r3
 80007c4:	4b1e      	ldr	r3, [pc, #120]	; (8000840 <AHT15_read_data+0x14c>)
 80007c6:	601a      	str	r2, [r3, #0]

		uint32_t temperature_bytes = ((uint32_t)(received_data[2] & 0b00001111) << 16) + ((uint32_t)received_data[1] << 8) + (uint32_t)received_data[0];
 80007c8:	79bb      	ldrb	r3, [r7, #6]
 80007ca:	041b      	lsls	r3, r3, #16
 80007cc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80007d0:	797b      	ldrb	r3, [r7, #5]
 80007d2:	021b      	lsls	r3, r3, #8
 80007d4:	4413      	add	r3, r2
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4413      	add	r3, r2
 80007da:	613b      	str	r3, [r7, #16]
		AHT15_temperature = (((float)temperature_bytes / (float)constant) * 200.0f) - 50.0f;
 80007dc:	6938      	ldr	r0, [r7, #16]
 80007de:	f7ff fd73 	bl	80002c8 <__aeabi_ui2f>
 80007e2:	4604      	mov	r4, r0
 80007e4:	69b8      	ldr	r0, [r7, #24]
 80007e6:	f7ff fd6f 	bl	80002c8 <__aeabi_ui2f>
 80007ea:	4603      	mov	r3, r0
 80007ec:	4619      	mov	r1, r3
 80007ee:	4620      	mov	r0, r4
 80007f0:	f7ff fe76 	bl	80004e0 <__aeabi_fdiv>
 80007f4:	4603      	mov	r3, r0
 80007f6:	4913      	ldr	r1, [pc, #76]	; (8000844 <AHT15_read_data+0x150>)
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fdbd 	bl	8000378 <__aeabi_fmul>
 80007fe:	4603      	mov	r3, r0
 8000800:	4911      	ldr	r1, [pc, #68]	; (8000848 <AHT15_read_data+0x154>)
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fcae 	bl	8000164 <__aeabi_fsub>
 8000808:	4603      	mov	r3, r0
 800080a:	461a      	mov	r2, r3
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <AHT15_read_data+0x158>)
 800080e:	601a      	str	r2, [r3, #0]
		  AHT15_reset();
		  HAL_Delay(100);
		  AHT15_init();
		  HAL_Delay(100);
	}
}
 8000810:	e009      	b.n	8000826 <AHT15_read_data+0x132>
		  AHT15_reset();
 8000812:	f7ff ff4b 	bl	80006ac <AHT15_reset>
		  HAL_Delay(100);
 8000816:	2064      	movs	r0, #100	; 0x64
 8000818:	f000 fe90 	bl	800153c <HAL_Delay>
		  AHT15_init();
 800081c:	f7ff ff22 	bl	8000664 <AHT15_init>
		  HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f000 fe8b 	bl	800153c <HAL_Delay>
}
 8000826:	bf00      	nop
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	bd90      	pop	{r4, r7, pc}
 800082e:	bf00      	nop
 8000830:	08004ff4 	.word	0x08004ff4
 8000834:	40011000 	.word	0x40011000
 8000838:	20000880 	.word	0x20000880
 800083c:	42c80000 	.word	0x42c80000
 8000840:	20000000 	.word	0x20000000
 8000844:	43480000 	.word	0x43480000
 8000848:	42480000 	.word	0x42480000
 800084c:	20000004 	.word	0x20000004

08000850 <ESP_RESET>:
uint32_t seconds = 0;
uint8_t buffer[2000];
uint16_t buffer_index = 0, timeout = 0, messageHandlerFlag = 0;

void ESP_RESET()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2110      	movs	r1, #16
 8000858:	480b      	ldr	r0, [pc, #44]	; (8000888 <ESP_RESET+0x38>)
 800085a:	f001 f9d5 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2108      	movs	r1, #8
 8000862:	4809      	ldr	r0, [pc, #36]	; (8000888 <ESP_RESET+0x38>)
 8000864:	f001 f9d0 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_Delay(30);
 8000868:	201e      	movs	r0, #30
 800086a:	f000 fe67 	bl	800153c <HAL_Delay>
	HAL_GPIO_WritePin(ESP_ENABLE_GPIO_Port, ESP_ENABLE_Pin, GPIO_PIN_SET);
 800086e:	2201      	movs	r2, #1
 8000870:	2110      	movs	r1, #16
 8000872:	4805      	ldr	r0, [pc, #20]	; (8000888 <ESP_RESET+0x38>)
 8000874:	f001 f9c8 	bl	8001c08 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ESP_RESET_GPIO_Port, ESP_RESET_Pin, GPIO_PIN_SET);
 8000878:	2201      	movs	r2, #1
 800087a:	2108      	movs	r1, #8
 800087c:	4802      	ldr	r0, [pc, #8]	; (8000888 <ESP_RESET+0x38>)
 800087e:	f001 f9c3 	bl	8001c08 <HAL_GPIO_WritePin>
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40010c00 	.word	0x40010c00

0800088c <ESP_Server_Init>:

void ESP_Server_Init()
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	ESP_RESET();
 8000890:	f7ff ffde 	bl	8000850 <ESP_RESET>
	HAL_Delay(2000);
 8000894:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000898:	f000 fe50 	bl	800153c <HAL_Delay>
	ESP_Clear_Buffer();
 800089c:	f000 f852 	bl	8000944 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+RST\r\n", strlen("AT+RST\r\n"), 100);
 80008a0:	2364      	movs	r3, #100	; 0x64
 80008a2:	2208      	movs	r2, #8
 80008a4:	4920      	ldr	r1, [pc, #128]	; (8000928 <ESP_Server_Init+0x9c>)
 80008a6:	4821      	ldr	r0, [pc, #132]	; (800092c <ESP_Server_Init+0xa0>)
 80008a8:	f003 f9ff 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(1500);
 80008ac:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80008b0:	f000 fe44 	bl	800153c <HAL_Delay>
	ESP_Clear_Buffer();
 80008b4:	f000 f846 	bl	8000944 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"), 100);
 80008b8:	2364      	movs	r3, #100	; 0x64
 80008ba:	220d      	movs	r2, #13
 80008bc:	491c      	ldr	r1, [pc, #112]	; (8000930 <ESP_Server_Init+0xa4>)
 80008be:	481b      	ldr	r0, [pc, #108]	; (800092c <ESP_Server_Init+0xa0>)
 80008c0:	f003 f9f3 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(2000);
 80008c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008c8:	f000 fe38 	bl	800153c <HAL_Delay>
	ESP_Clear_Buffer();
 80008cc:	f000 f83a 	bl	8000944 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CWDHCP=1,1\r\n", strlen("AT+CWDHCP=1,1\r\n"), 100);
 80008d0:	2364      	movs	r3, #100	; 0x64
 80008d2:	220f      	movs	r2, #15
 80008d4:	4917      	ldr	r1, [pc, #92]	; (8000934 <ESP_Server_Init+0xa8>)
 80008d6:	4815      	ldr	r0, [pc, #84]	; (800092c <ESP_Server_Init+0xa0>)
 80008d8:	f003 f9e7 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(2000);
 80008dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e0:	f000 fe2c 	bl	800153c <HAL_Delay>
	ESP_Clear_Buffer();
 80008e4:	f000 f82e 	bl	8000944 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"), 100);
 80008e8:	2364      	movs	r3, #100	; 0x64
 80008ea:	220d      	movs	r2, #13
 80008ec:	4912      	ldr	r1, [pc, #72]	; (8000938 <ESP_Server_Init+0xac>)
 80008ee:	480f      	ldr	r0, [pc, #60]	; (800092c <ESP_Server_Init+0xa0>)
 80008f0:	f003 f9db 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(2000);
 80008f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008f8:	f000 fe20 	bl	800153c <HAL_Delay>
	ESP_Clear_Buffer();
 80008fc:	f000 f822 	bl	8000944 <ESP_Clear_Buffer>

	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPSERVER=1,80\r\n", strlen("AT+CIPSERVER=1,80\r\n"), 100);
 8000900:	2364      	movs	r3, #100	; 0x64
 8000902:	2213      	movs	r2, #19
 8000904:	490d      	ldr	r1, [pc, #52]	; (800093c <ESP_Server_Init+0xb0>)
 8000906:	4809      	ldr	r0, [pc, #36]	; (800092c <ESP_Server_Init+0xa0>)
 8000908:	f003 f9cf 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(2000);
 800090c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000910:	f000 fe14 	bl	800153c <HAL_Delay>
	ESP_Clear_Buffer();
 8000914:	f000 f816 	bl	8000944 <ESP_Clear_Buffer>

	//Change your WiFi SSID credentials below
	HAL_UART_Transmit(&huart1, (uint8_t*)WiFi_Credentials, strlen(WiFi_Credentials), 100);
 8000918:	2364      	movs	r3, #100	; 0x64
 800091a:	2224      	movs	r2, #36	; 0x24
 800091c:	4908      	ldr	r1, [pc, #32]	; (8000940 <ESP_Server_Init+0xb4>)
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <ESP_Server_Init+0xa0>)
 8000920:	f003 f9c3 	bl	8003caa <HAL_UART_Transmit>
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	08004ff8 	.word	0x08004ff8
 800092c:	2000091c 	.word	0x2000091c
 8000930:	08005004 	.word	0x08005004
 8000934:	08005014 	.word	0x08005014
 8000938:	08005024 	.word	0x08005024
 800093c:	08005034 	.word	0x08005034
 8000940:	08005048 	.word	0x08005048

08000944 <ESP_Clear_Buffer>:

void ESP_Clear_Buffer()
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
	memset(buffer, 0, 2000);
 8000948:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800094c:	2100      	movs	r1, #0
 800094e:	4804      	ldr	r0, [pc, #16]	; (8000960 <ESP_Clear_Buffer+0x1c>)
 8000950:	f003 ff02 	bl	8004758 <memset>
	buffer_index = 0;
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <ESP_Clear_Buffer+0x20>)
 8000956:	2200      	movs	r2, #0
 8000958:	801a      	strh	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	200000b0 	.word	0x200000b0
 8000964:	2000009c 	.word	0x2000009c

08000968 <string_compare>:

uint8_t string_compare(char array1[], char array2[], uint16_t length)
{
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	4613      	mov	r3, r2
 8000974:	80fb      	strh	r3, [r7, #6]
	 uint16_t comVAR=0, i;
 8000976:	2300      	movs	r3, #0
 8000978:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 800097a:	2300      	movs	r3, #0
 800097c:	82bb      	strh	r3, [r7, #20]
 800097e:	e012      	b.n	80009a6 <string_compare+0x3e>
	   	{
	   		  if(array1[i]==array2[i])
 8000980:	8abb      	ldrh	r3, [r7, #20]
 8000982:	68fa      	ldr	r2, [r7, #12]
 8000984:	4413      	add	r3, r2
 8000986:	781a      	ldrb	r2, [r3, #0]
 8000988:	8abb      	ldrh	r3, [r7, #20]
 800098a:	68b9      	ldr	r1, [r7, #8]
 800098c:	440b      	add	r3, r1
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	429a      	cmp	r2, r3
 8000992:	d103      	bne.n	800099c <string_compare+0x34>
	   	  		  comVAR++;
 8000994:	8afb      	ldrh	r3, [r7, #22]
 8000996:	3301      	adds	r3, #1
 8000998:	82fb      	strh	r3, [r7, #22]
 800099a:	e001      	b.n	80009a0 <string_compare+0x38>
	   	  	  else comVAR=0;
 800099c:	2300      	movs	r3, #0
 800099e:	82fb      	strh	r3, [r7, #22]
	 for(i=0;i<length;i++)
 80009a0:	8abb      	ldrh	r3, [r7, #20]
 80009a2:	3301      	adds	r3, #1
 80009a4:	82bb      	strh	r3, [r7, #20]
 80009a6:	8aba      	ldrh	r2, [r7, #20]
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	429a      	cmp	r2, r3
 80009ac:	d3e8      	bcc.n	8000980 <string_compare+0x18>
	   	}
	 if (comVAR==length)
 80009ae:	8afa      	ldrh	r2, [r7, #22]
 80009b0:	88fb      	ldrh	r3, [r7, #6]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d101      	bne.n	80009ba <string_compare+0x52>
		 	return 1;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e000      	b.n	80009bc <string_compare+0x54>
	 else 	return 0;
 80009ba:	2300      	movs	r3, #0
}
 80009bc:	4618      	mov	r0, r3
 80009be:	371c      	adds	r7, #28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <string_contains>:

int string_contains(char bufferArray[], char searchedString[], uint16_t length)
{
 80009c6:	b590      	push	{r4, r7, lr}
 80009c8:	b087      	sub	sp, #28
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	60f8      	str	r0, [r7, #12]
 80009ce:	60b9      	str	r1, [r7, #8]
 80009d0:	4613      	mov	r3, r2
 80009d2:	80fb      	strh	r3, [r7, #6]
	uint8_t result=0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	757b      	strb	r3, [r7, #21]
	for(uint16_t i=0; i<length; i++)
 80009d8:	2300      	movs	r3, #0
 80009da:	82fb      	strh	r3, [r7, #22]
 80009dc:	e016      	b.n	8000a0c <string_contains+0x46>
	{
		result = string_compare(&bufferArray[i], &searchedString[0], strlen(searchedString));
 80009de:	8afb      	ldrh	r3, [r7, #22]
 80009e0:	68fa      	ldr	r2, [r7, #12]
 80009e2:	18d4      	adds	r4, r2, r3
 80009e4:	68b8      	ldr	r0, [r7, #8]
 80009e6:	f7ff fbb1 	bl	800014c <strlen>
 80009ea:	4603      	mov	r3, r0
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	461a      	mov	r2, r3
 80009f0:	68b9      	ldr	r1, [r7, #8]
 80009f2:	4620      	mov	r0, r4
 80009f4:	f7ff ffb8 	bl	8000968 <string_compare>
 80009f8:	4603      	mov	r3, r0
 80009fa:	757b      	strb	r3, [r7, #21]
		if(result == 1)
 80009fc:	7d7b      	ldrb	r3, [r7, #21]
 80009fe:	2b01      	cmp	r3, #1
 8000a00:	d101      	bne.n	8000a06 <string_contains+0x40>
			return i;
 8000a02:	8afb      	ldrh	r3, [r7, #22]
 8000a04:	e008      	b.n	8000a18 <string_contains+0x52>
	for(uint16_t i=0; i<length; i++)
 8000a06:	8afb      	ldrh	r3, [r7, #22]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	82fb      	strh	r3, [r7, #22]
 8000a0c:	8afa      	ldrh	r2, [r7, #22]
 8000a0e:	88fb      	ldrh	r3, [r7, #6]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d3e4      	bcc.n	80009de <string_contains+0x18>
	}
	return -1;
 8000a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	371c      	adds	r7, #28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd90      	pop	{r4, r7, pc}

08000a20 <messageHandler>:

void messageHandler()
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	__HAL_UART_DISABLE_IT(&huart1, UART_IT_RXNE);
 8000a26:	4b27      	ldr	r3, [pc, #156]	; (8000ac4 <messageHandler+0xa4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	4b25      	ldr	r3, [pc, #148]	; (8000ac4 <messageHandler+0xa4>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f022 0220 	bic.w	r2, r2, #32
 8000a34:	60da      	str	r2, [r3, #12]
	int position = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	607b      	str	r3, [r7, #4]
	if((position = string_contains((char*)buffer, "GET", buffer_index)) != -1)
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <messageHandler+0xa8>)
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4922      	ldr	r1, [pc, #136]	; (8000acc <messageHandler+0xac>)
 8000a42:	4823      	ldr	r0, [pc, #140]	; (8000ad0 <messageHandler+0xb0>)
 8000a44:	f7ff ffbf 	bl	80009c6 <string_contains>
 8000a48:	6078      	str	r0, [r7, #4]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a50:	d002      	beq.n	8000a58 <messageHandler+0x38>
	{
		sendData();
 8000a52:	f000 f847 	bl	8000ae4 <sendData>
 8000a56:	e026      	b.n	8000aa6 <messageHandler+0x86>
	}else if(string_contains((char*)buffer, "+CWJAP:", buffer_index) != -1
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <messageHandler+0xa8>)
 8000a5a:	881b      	ldrh	r3, [r3, #0]
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	491d      	ldr	r1, [pc, #116]	; (8000ad4 <messageHandler+0xb4>)
 8000a60:	481b      	ldr	r0, [pc, #108]	; (8000ad0 <messageHandler+0xb0>)
 8000a62:	f7ff ffb0 	bl	80009c6 <string_contains>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a6c:	d01b      	beq.n	8000aa6 <messageHandler+0x86>
			&& (string_contains((char*)buffer, "FAIL", buffer_index) != -1
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <messageHandler+0xa8>)
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	461a      	mov	r2, r3
 8000a74:	4918      	ldr	r1, [pc, #96]	; (8000ad8 <messageHandler+0xb8>)
 8000a76:	4816      	ldr	r0, [pc, #88]	; (8000ad0 <messageHandler+0xb0>)
 8000a78:	f7ff ffa5 	bl	80009c6 <string_contains>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a82:	d10a      	bne.n	8000a9a <messageHandler+0x7a>
			|| string_contains((char*)buffer, "DISCONNECT", buffer_index) != -1))
 8000a84:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <messageHandler+0xa8>)
 8000a86:	881b      	ldrh	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4914      	ldr	r1, [pc, #80]	; (8000adc <messageHandler+0xbc>)
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <messageHandler+0xb0>)
 8000a8e:	f7ff ff9a 	bl	80009c6 <string_contains>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a98:	d005      	beq.n	8000aa6 <messageHandler+0x86>
	{
		HAL_UART_Transmit(&huart1, (uint8_t*)WiFi_Credentials, strlen(WiFi_Credentials), 100);
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	2224      	movs	r2, #36	; 0x24
 8000a9e:	4910      	ldr	r1, [pc, #64]	; (8000ae0 <messageHandler+0xc0>)
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <messageHandler+0xa4>)
 8000aa2:	f003 f902 	bl	8003caa <HAL_UART_Transmit>
	}
	ESP_Clear_Buffer();
 8000aa6:	f7ff ff4d 	bl	8000944 <ESP_Clear_Buffer>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <messageHandler+0xa4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	68da      	ldr	r2, [r3, #12]
 8000ab0:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <messageHandler+0xa4>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f042 0220 	orr.w	r2, r2, #32
 8000ab8:	60da      	str	r2, [r3, #12]
}
 8000aba:	bf00      	nop
 8000abc:	3708      	adds	r7, #8
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	2000091c 	.word	0x2000091c
 8000ac8:	2000009c 	.word	0x2000009c
 8000acc:	08005070 	.word	0x08005070
 8000ad0:	200000b0 	.word	0x200000b0
 8000ad4:	08005074 	.word	0x08005074
 8000ad8:	0800507c 	.word	0x0800507c
 8000adc:	08005084 	.word	0x08005084
 8000ae0:	08005048 	.word	0x08005048

08000ae4 <sendData>:

void sendData()//sends data compatible with a browser
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	f5ad 7d6e 	sub.w	sp, sp, #952	; 0x3b8
 8000aea:	af00      	add	r7, sp, #0
	char outputString[300], cipsend[50], response[600];
	memset(outputString, 0, 300);
 8000aec:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8000af0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 fe2e 	bl	8004758 <memset>
	memset(cipsend, 0, 50);
 8000afc:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000b00:	2232      	movs	r2, #50	; 0x32
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 fe27 	bl	8004758 <memset>
	memset(response, 0, 600);
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 fe20 	bl	8004758 <memset>

	sprintf(outputString, "<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><title>STM32 IoT</title><meta http-equiv=\"refresh\" content=\"30\"></head><body><h1>Humidity: %i%%</h1></body></html>", (int)AHT15_relative_humidity);
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <sendData+0xcc>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd7b 	bl	8000618 <__aeabi_f2iz>
 8000b22:	4602      	mov	r2, r0
 8000b24:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8000b28:	4922      	ldr	r1, [pc, #136]	; (8000bb4 <sendData+0xd0>)
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 fe1c 	bl	8004768 <siprintf>
	sprintf(response, "HTTP/1.1 200 OK\r\nContent-Length: %i\r\nContent-Type: text/html\r\n\r\n%s", strlen(outputString), outputString);
 8000b30:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fb09 	bl	800014c <strlen>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8000b40:	4638      	mov	r0, r7
 8000b42:	491d      	ldr	r1, [pc, #116]	; (8000bb8 <sendData+0xd4>)
 8000b44:	f003 fe10 	bl	8004768 <siprintf>
	sprintf(cipsend, "AT+CIPSEND=0,%i\r\n", strlen(response));
 8000b48:	463b      	mov	r3, r7
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fafe 	bl	800014c <strlen>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000b56:	4919      	ldr	r1, [pc, #100]	; (8000bbc <sendData+0xd8>)
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f003 fe05 	bl	8004768 <siprintf>

	HAL_UART_Transmit(&huart1, (uint8_t*)cipsend, strlen(cipsend), 100);
 8000b5e:	f507 7316 	add.w	r3, r7, #600	; 0x258
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff faf2 	bl	800014c <strlen>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	f507 7116 	add.w	r1, r7, #600	; 0x258
 8000b70:	2364      	movs	r3, #100	; 0x64
 8000b72:	4813      	ldr	r0, [pc, #76]	; (8000bc0 <sendData+0xdc>)
 8000b74:	f003 f899 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(50);
 8000b78:	2032      	movs	r0, #50	; 0x32
 8000b7a:	f000 fcdf 	bl	800153c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)response, strlen(response), 100);
 8000b7e:	463b      	mov	r3, r7
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fae3 	bl	800014c <strlen>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4639      	mov	r1, r7
 8000b8c:	2364      	movs	r3, #100	; 0x64
 8000b8e:	480c      	ldr	r0, [pc, #48]	; (8000bc0 <sendData+0xdc>)
 8000b90:	f003 f88b 	bl	8003caa <HAL_UART_Transmit>
	HAL_Delay(50);
 8000b94:	2032      	movs	r0, #50	; 0x32
 8000b96:	f000 fcd1 	bl	800153c <HAL_Delay>
	HAL_UART_Transmit(&huart1, (uint8_t*)"AT+CIPCLOSE=0\r\n", strlen("AT+CIPCLOSE=0\r\n"), 100);
 8000b9a:	2364      	movs	r3, #100	; 0x64
 8000b9c:	220f      	movs	r2, #15
 8000b9e:	4909      	ldr	r1, [pc, #36]	; (8000bc4 <sendData+0xe0>)
 8000ba0:	4807      	ldr	r0, [pc, #28]	; (8000bc0 <sendData+0xdc>)
 8000ba2:	f003 f882 	bl	8003caa <HAL_UART_Transmit>
}
 8000ba6:	bf00      	nop
 8000ba8:	f507 776e 	add.w	r7, r7, #952	; 0x3b8
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08005090 	.word	0x08005090
 8000bb8:	08005154 	.word	0x08005154
 8000bbc:	08005198 	.word	0x08005198
 8000bc0:	2000091c 	.word	0x2000091c
 8000bc4:	080051ac 	.word	0x080051ac

08000bc8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000bcc:	f3bf 8f4f 	dsb	sy
}
 8000bd0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <__NVIC_SystemReset+0x24>)
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000bda:	4904      	ldr	r1, [pc, #16]	; (8000bec <__NVIC_SystemReset+0x24>)
 8000bdc:	4b04      	ldr	r3, [pc, #16]	; (8000bf0 <__NVIC_SystemReset+0x28>)
 8000bde:	4313      	orrs	r3, r2
 8000be0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000be2:	f3bf 8f4f 	dsb	sy
}
 8000be6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <__NVIC_SystemReset+0x20>
 8000bec:	e000ed00 	.word	0xe000ed00
 8000bf0:	05fa0004 	.word	0x05fa0004

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f000 fc3e 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f84e 	bl	8000c9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f000 f984 	bl	8000f0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c04:	f000 f890 	bl	8000d28 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000c08:	f000 f8bc 	bl	8000d84 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c0c:	f000 f906 	bl	8000e1c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000c10:	f000 f952 	bl	8000eb8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);// 20 ms
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <main+0x8c>)
 8000c16:	f002 fc47 	bl	80034a8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);// 1 s
 8000c1a:	481a      	ldr	r0, [pc, #104]	; (8000c84 <main+0x90>)
 8000c1c:	f002 fc44 	bl	80034a8 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8000c20:	2064      	movs	r0, #100	; 0x64
 8000c22:	f000 fc8b 	bl	800153c <HAL_Delay>
  AHT15_reset();
 8000c26:	f7ff fd41 	bl	80006ac <AHT15_reset>
  HAL_Delay(100);
 8000c2a:	2064      	movs	r0, #100	; 0x64
 8000c2c:	f000 fc86 	bl	800153c <HAL_Delay>
  AHT15_init();
 8000c30:	f7ff fd18 	bl	8000664 <AHT15_init>
  AHT15_read_data();
 8000c34:	f7ff fd5e 	bl	80006f4 <AHT15_read_data>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <main+0x94>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	68da      	ldr	r2, [r3, #12]
 8000c3e:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <main+0x94>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f042 0220 	orr.w	r2, r2, #32
 8000c46:	60da      	str	r2, [r3, #12]
  ESP_Server_Init();
 8000c48:	f7ff fe20 	bl	800088c <ESP_Server_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(measure_humidity)
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <main+0x98>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d004      	beq.n	8000c5e <main+0x6a>
	  {
		  AHT15_read_data();
 8000c54:	f7ff fd4e 	bl	80006f4 <AHT15_read_data>
		  measure_humidity = 0;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <main+0x98>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	701a      	strb	r2, [r3, #0]
	  }

	  if(messageHandlerFlag)
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <main+0x9c>)
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d004      	beq.n	8000c70 <main+0x7c>
	  {
		  messageHandler();
 8000c66:	f7ff fedb 	bl	8000a20 <messageHandler>
		  messageHandlerFlag = 0;
 8000c6a:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <main+0x9c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	801a      	strh	r2, [r3, #0]
	  }

	  if(seconds > 86400)// 24 hours
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <main+0xa0>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a08      	ldr	r2, [pc, #32]	; (8000c98 <main+0xa4>)
 8000c76:	4293      	cmp	r3, r2
 8000c78:	d9e8      	bls.n	8000c4c <main+0x58>
		  NVIC_SystemReset();
 8000c7a:	f7ff ffa5 	bl	8000bc8 <__NVIC_SystemReset>
 8000c7e:	bf00      	nop
 8000c80:	20000960 	.word	0x20000960
 8000c84:	200008d4 	.word	0x200008d4
 8000c88:	2000091c 	.word	0x2000091c
 8000c8c:	20000094 	.word	0x20000094
 8000c90:	200000a0 	.word	0x200000a0
 8000c94:	20000098 	.word	0x20000098
 8000c98:	00015180 	.word	0x00015180

08000c9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
 8000ca0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ca2:	f107 0318 	add.w	r3, r7, #24
 8000ca6:	2228      	movs	r2, #40	; 0x28
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 fd54 	bl	8004758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cb0:	1d3b      	adds	r3, r7, #4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cda:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ce0:	f107 0318 	add.w	r3, r7, #24
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 ff75 	bl	8002bd4 <HAL_RCC_OscConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cf0:	f000 f978 	bl	8000fe4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cf4:	230f      	movs	r3, #15
 8000cf6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d0a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2102      	movs	r1, #2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 f9df 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d1c:	f000 f962 	bl	8000fe4 <Error_Handler>
  }
}
 8000d20:	bf00      	nop
 8000d22:	3740      	adds	r7, #64	; 0x40
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d2c:	4b12      	ldr	r3, [pc, #72]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_I2C1_Init+0x54>)
 8000d30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d32:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d34:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <MX_I2C1_Init+0x58>)
 8000d36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d38:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d4c:	4b0a      	ldr	r3, [pc, #40]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d58:	4b07      	ldr	r3, [pc, #28]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d64:	4804      	ldr	r0, [pc, #16]	; (8000d78 <MX_I2C1_Init+0x50>)
 8000d66:	f000 ff67 	bl	8001c38 <HAL_I2C_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d70:	f000 f938 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000880 	.word	0x20000880
 8000d7c:	40005400 	.word	0x40005400
 8000d80:	000186a0 	.word	0x000186a0

08000d84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d8a:	f107 0308 	add.w	r3, r7, #8
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d98:	463b      	mov	r3, r7
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da0:	4b1d      	ldr	r3, [pc, #116]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000da2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000da6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000daa:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000dae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b19      	ldr	r3, [pc, #100]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 8000db6:	4b18      	ldr	r3, [pc, #96]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000db8:	22c7      	movs	r2, #199	; 0xc7
 8000dba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbc:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dc8:	4813      	ldr	r0, [pc, #76]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000dca:	f002 fb1d 	bl	8003408 <HAL_TIM_Base_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000dd4:	f000 f906 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ddc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4619      	mov	r1, r3
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000de6:	f002 fcb9 	bl	800375c <HAL_TIM_ConfigClockSource>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df0:	f000 f8f8 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000df4:	2300      	movs	r3, #0
 8000df6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4805      	ldr	r0, [pc, #20]	; (8000e18 <MX_TIM2_Init+0x94>)
 8000e02:	f002 fe95 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 f8ea 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e10:	bf00      	nop
 8000e12:	3718      	adds	r7, #24
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000960 	.word	0x20000960

08000e1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
 8000e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e30:	463b      	mov	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e3a:	4a1e      	ldr	r2, [pc, #120]	; (8000eb4 <MX_TIM3_Init+0x98>)
 8000e3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200;
 8000e3e:	4b1c      	ldr	r3, [pc, #112]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e40:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8000e44:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e46:	4b1a      	ldr	r3, [pc, #104]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8000e4c:	4b18      	ldr	r3, [pc, #96]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e4e:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e52:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e54:	4b16      	ldr	r3, [pc, #88]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e5a:	4b15      	ldr	r3, [pc, #84]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e60:	4813      	ldr	r0, [pc, #76]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e62:	f002 fad1 	bl	8003408 <HAL_TIM_Base_Init>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000e6c:	f000 f8ba 	bl	8000fe4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e76:	f107 0308 	add.w	r3, r7, #8
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	480c      	ldr	r0, [pc, #48]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e7e:	f002 fc6d 	bl	800375c <HAL_TIM_ConfigClockSource>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000e88:	f000 f8ac 	bl	8000fe4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e94:	463b      	mov	r3, r7
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM3_Init+0x94>)
 8000e9a:	f002 fe49 	bl	8003b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000ea4:	f000 f89e 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200008d4 	.word	0x200008d4
 8000eb4:	40000400 	.word	0x40000400

08000eb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	; (8000f08 <MX_USART1_UART_Init+0x50>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b0e      	ldr	r3, [pc, #56]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b08      	ldr	r3, [pc, #32]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eee:	4805      	ldr	r0, [pc, #20]	; (8000f04 <MX_USART1_UART_Init+0x4c>)
 8000ef0:	f002 fe8e 	bl	8003c10 <HAL_UART_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000efa:	f000 f873 	bl	8000fe4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	2000091c 	.word	0x2000091c
 8000f08:	40013800 	.word	0x40013800

08000f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a2c      	ldr	r2, [pc, #176]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f26:	f043 0310 	orr.w	r3, r3, #16
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f38:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	4a26      	ldr	r2, [pc, #152]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f3e:	f043 0320 	orr.w	r3, r3, #32
 8000f42:	6193      	str	r3, [r2, #24]
 8000f44:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	f003 0320 	and.w	r3, r3, #32
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f50:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	6193      	str	r3, [r2, #24]
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f003 0304 	and.w	r3, r3, #4
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f68:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f6a:	699b      	ldr	r3, [r3, #24]
 8000f6c:	4a1a      	ldr	r2, [pc, #104]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f6e:	f043 0308 	orr.w	r3, r3, #8
 8000f72:	6193      	str	r3, [r2, #24]
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0xcc>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	f003 0308 	and.w	r3, r3, #8
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f86:	4815      	ldr	r0, [pc, #84]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000f88:	f000 fe3e 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ESP_RESET_Pin|ESP_ENABLE_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	2118      	movs	r1, #24
 8000f90:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000f92:	f000 fe39 	bl	8001c08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f96:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	4619      	mov	r1, r3
 8000fae:	480b      	ldr	r0, [pc, #44]	; (8000fdc <MX_GPIO_Init+0xd0>)
 8000fb0:	f000 fca6 	bl	8001900 <HAL_GPIO_Init>

  /*Configure GPIO pins : ESP_RESET_Pin ESP_ENABLE_Pin */
  GPIO_InitStruct.Pin = ESP_RESET_Pin|ESP_ENABLE_Pin;
 8000fb4:	2318      	movs	r3, #24
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc0:	2303      	movs	r3, #3
 8000fc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_GPIO_Init+0xd4>)
 8000fcc:	f000 fc98 	bl	8001900 <HAL_GPIO_Init>

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40010c00 	.word	0x40010c00

08000fe4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b085      	sub	sp, #20
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <HAL_MspInit+0x5c>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a14      	ldr	r2, [pc, #80]	; (800104c <HAL_MspInit+0x5c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b12      	ldr	r3, [pc, #72]	; (800104c <HAL_MspInit+0x5c>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b0f      	ldr	r3, [pc, #60]	; (800104c <HAL_MspInit+0x5c>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a0e      	ldr	r2, [pc, #56]	; (800104c <HAL_MspInit+0x5c>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b0c      	ldr	r3, [pc, #48]	; (800104c <HAL_MspInit+0x5c>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_MspInit+0x60>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_MspInit+0x60>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001042:	bf00      	nop
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr
 800104c:	40021000 	.word	0x40021000
 8001050:	40010000 	.word	0x40010000

08001054 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <HAL_I2C_MspInit+0x70>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d123      	bne.n	80010bc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 8001076:	699b      	ldr	r3, [r3, #24]
 8001078:	4a13      	ldr	r2, [pc, #76]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	6193      	str	r3, [r2, #24]
 8001080:	4b11      	ldr	r3, [pc, #68]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800108c:	23c0      	movs	r3, #192	; 0xc0
 800108e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001090:	2312      	movs	r3, #18
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001098:	f107 0310 	add.w	r3, r7, #16
 800109c:	4619      	mov	r1, r3
 800109e:	480b      	ldr	r0, [pc, #44]	; (80010cc <HAL_I2C_MspInit+0x78>)
 80010a0:	f000 fc2e 	bl	8001900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 80010aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ae:	61d3      	str	r3, [r2, #28]
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_I2C_MspInit+0x74>)
 80010b2:	69db      	ldr	r3, [r3, #28]
 80010b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010bc:	bf00      	nop
 80010be:	3720      	adds	r7, #32
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40021000 	.word	0x40021000
 80010cc:	40010c00 	.word	0x40010c00

080010d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e0:	d114      	bne.n	800110c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <HAL_TIM_Base_MspInit+0x78>)
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	4a18      	ldr	r2, [pc, #96]	; (8001148 <HAL_TIM_Base_MspInit+0x78>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	61d3      	str	r3, [r2, #28]
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <HAL_TIM_Base_MspInit+0x78>)
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2100      	movs	r1, #0
 80010fe:	201c      	movs	r0, #28
 8001100:	f000 fb17 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001104:	201c      	movs	r0, #28
 8001106:	f000 fb30 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800110a:	e018      	b.n	800113e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_TIM_Base_MspInit+0x7c>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d113      	bne.n	800113e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_TIM_Base_MspInit+0x78>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_TIM_Base_MspInit+0x78>)
 800111c:	f043 0302 	orr.w	r3, r3, #2
 8001120:	61d3      	str	r3, [r2, #28]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_TIM_Base_MspInit+0x78>)
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	60bb      	str	r3, [r7, #8]
 800112c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	201d      	movs	r0, #29
 8001134:	f000 fafd 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001138:	201d      	movs	r0, #29
 800113a:	f000 fb16 	bl	800176a <HAL_NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000
 800114c:	40000400 	.word	0x40000400

08001150 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a20      	ldr	r2, [pc, #128]	; (80011ec <HAL_UART_MspInit+0x9c>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d139      	bne.n	80011e4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <HAL_UART_MspInit+0xa0>)
 8001172:	699b      	ldr	r3, [r3, #24]
 8001174:	4a1e      	ldr	r2, [pc, #120]	; (80011f0 <HAL_UART_MspInit+0xa0>)
 8001176:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800117a:	6193      	str	r3, [r2, #24]
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <HAL_UART_MspInit+0xa0>)
 800117e:	699b      	ldr	r3, [r3, #24]
 8001180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001188:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <HAL_UART_MspInit+0xa0>)
 800118a:	699b      	ldr	r3, [r3, #24]
 800118c:	4a18      	ldr	r2, [pc, #96]	; (80011f0 <HAL_UART_MspInit+0xa0>)
 800118e:	f043 0304 	orr.w	r3, r3, #4
 8001192:	6193      	str	r3, [r2, #24]
 8001194:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <HAL_UART_MspInit+0xa0>)
 8001196:	699b      	ldr	r3, [r3, #24]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a6:	2302      	movs	r3, #2
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011aa:	2303      	movs	r3, #3
 80011ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	4619      	mov	r1, r3
 80011b4:	480f      	ldr	r0, [pc, #60]	; (80011f4 <HAL_UART_MspInit+0xa4>)
 80011b6:	f000 fba3 	bl	8001900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	4619      	mov	r1, r3
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <HAL_UART_MspInit+0xa4>)
 80011d0:	f000 fb96 	bl	8001900 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011d4:	2200      	movs	r2, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	2025      	movs	r0, #37	; 0x25
 80011da:	f000 faaa 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011de:	2025      	movs	r0, #37	; 0x25
 80011e0:	f000 fac3 	bl	800176a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40013800 	.word	0x40013800
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40010800 	.word	0x40010800

080011f8 <__NVIC_SystemReset>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80011fc:	f3bf 8f4f 	dsb	sy
}
 8001200:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <__NVIC_SystemReset+0x24>)
 8001204:	68db      	ldr	r3, [r3, #12]
 8001206:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800120a:	4904      	ldr	r1, [pc, #16]	; (800121c <__NVIC_SystemReset+0x24>)
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <__NVIC_SystemReset+0x28>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001212:	f3bf 8f4f 	dsb	sy
}
 8001216:	bf00      	nop
    __NOP();
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <__NVIC_SystemReset+0x20>
 800121c:	e000ed00 	.word	0xe000ed00
 8001220:	05fa0004 	.word	0x05fa0004

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  NVIC_SystemReset();
 800122e:	f7ff ffe3 	bl	80011f8 <__NVIC_SystemReset>

08001232 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001236:	e7fe      	b.n	8001236 <MemManage_Handler+0x4>

08001238 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  NVIC_SystemReset();
 800123c:	f7ff ffdc 	bl	80011f8 <__NVIC_SystemReset>

08001240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  NVIC_SystemReset();
 8001244:	f7ff ffd8 	bl	80011f8 <__NVIC_SystemReset>

08001248 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr

0800126c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001270:	f000 f948 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}

08001278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// 20 milliseconds
	if(timeout != 0 && timeout < 10)
 800127c:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <TIM2_IRQHandler+0x40>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d009      	beq.n	8001298 <TIM2_IRQHandler+0x20>
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <TIM2_IRQHandler+0x40>)
 8001286:	881b      	ldrh	r3, [r3, #0]
 8001288:	2b09      	cmp	r3, #9
 800128a:	d805      	bhi.n	8001298 <TIM2_IRQHandler+0x20>
		timeout++;
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <TIM2_IRQHandler+0x40>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	3301      	adds	r3, #1
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <TIM2_IRQHandler+0x40>)
 8001296:	801a      	strh	r2, [r3, #0]

	if(timeout > 2)
 8001298:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <TIM2_IRQHandler+0x40>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	2b02      	cmp	r3, #2
 800129e:	d905      	bls.n	80012ac <TIM2_IRQHandler+0x34>
	{
		timeout = 0;
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <TIM2_IRQHandler+0x40>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	801a      	strh	r2, [r3, #0]
		messageHandlerFlag = 1;
 80012a6:	4b05      	ldr	r3, [pc, #20]	; (80012bc <TIM2_IRQHandler+0x44>)
 80012a8:	2201      	movs	r2, #1
 80012aa:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012ac:	4804      	ldr	r0, [pc, #16]	; (80012c0 <TIM2_IRQHandler+0x48>)
 80012ae:	f002 f94d 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	2000009e 	.word	0x2000009e
 80012bc:	200000a0 	.word	0x200000a0
 80012c0:	20000960 	.word	0x20000960

080012c4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	// 1 second
	seconds++;
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <TIM3_IRQHandler+0x38>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <TIM3_IRQHandler+0x38>)
 80012d0:	6013      	str	r3, [r2, #0]
	if(seconds%30 == 0)
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <TIM3_IRQHandler+0x38>)
 80012d4:	6819      	ldr	r1, [r3, #0]
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <TIM3_IRQHandler+0x3c>)
 80012d8:	fba3 2301 	umull	r2, r3, r3, r1
 80012dc:	091a      	lsrs	r2, r3, #4
 80012de:	4613      	mov	r3, r2
 80012e0:	011b      	lsls	r3, r3, #4
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	1aca      	subs	r2, r1, r3
 80012e8:	2a00      	cmp	r2, #0
 80012ea:	d102      	bne.n	80012f2 <TIM3_IRQHandler+0x2e>
		measure_humidity = 1;
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <TIM3_IRQHandler+0x40>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012f2:	4805      	ldr	r0, [pc, #20]	; (8001308 <TIM3_IRQHandler+0x44>)
 80012f4:	f002 f92a 	bl	800354c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000098 	.word	0x20000098
 8001300:	88888889 	.word	0x88888889
 8001304:	20000094 	.word	0x20000094
 8001308:	200008d4 	.word	0x200008d4

0800130c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	timeout = 1;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <USART1_IRQHandler+0x90>)
 8001312:	2201      	movs	r2, #1
 8001314:	801a      	strh	r2, [r3, #0]

	if(buffer_index < 2000)
 8001316:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <USART1_IRQHandler+0x94>)
 8001318:	881b      	ldrh	r3, [r3, #0]
 800131a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800131e:	d20e      	bcs.n	800133e <USART1_IRQHandler+0x32>
	{
		HAL_UART_Receive(&huart1, &buffer[buffer_index++], 1, 10);
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <USART1_IRQHandler+0x94>)
 8001322:	881b      	ldrh	r3, [r3, #0]
 8001324:	1c5a      	adds	r2, r3, #1
 8001326:	b291      	uxth	r1, r2
 8001328:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <USART1_IRQHandler+0x94>)
 800132a:	8011      	strh	r1, [r2, #0]
 800132c:	461a      	mov	r2, r3
 800132e:	4b1d      	ldr	r3, [pc, #116]	; (80013a4 <USART1_IRQHandler+0x98>)
 8001330:	18d1      	adds	r1, r2, r3
 8001332:	230a      	movs	r3, #10
 8001334:	2201      	movs	r2, #1
 8001336:	481c      	ldr	r0, [pc, #112]	; (80013a8 <USART1_IRQHandler+0x9c>)
 8001338:	f002 fd49 	bl	8003dce <HAL_UART_Receive>
 800133c:	e005      	b.n	800134a <USART1_IRQHandler+0x3e>
	}
	else
	{
		HAL_UART_Receive(&huart1, &buffer[1999], 1, 10);
 800133e:	230a      	movs	r3, #10
 8001340:	2201      	movs	r2, #1
 8001342:	491a      	ldr	r1, [pc, #104]	; (80013ac <USART1_IRQHandler+0xa0>)
 8001344:	4818      	ldr	r0, [pc, #96]	; (80013a8 <USART1_IRQHandler+0x9c>)
 8001346:	f002 fd42 	bl	8003dce <HAL_UART_Receive>
	}

	if(buffer_index > 5)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <USART1_IRQHandler+0x94>)
 800134c:	881b      	ldrh	r3, [r3, #0]
 800134e:	2b05      	cmp	r3, #5
 8001350:	d91e      	bls.n	8001390 <USART1_IRQHandler+0x84>
	{
		if(buffer[buffer_index-4] == '\r' && buffer[buffer_index-3] == '\n' && buffer[buffer_index-2] == '\r' && buffer[buffer_index-1] == '\n')
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <USART1_IRQHandler+0x94>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	3b04      	subs	r3, #4
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <USART1_IRQHandler+0x98>)
 800135a:	5cd3      	ldrb	r3, [r2, r3]
 800135c:	2b0d      	cmp	r3, #13
 800135e:	d117      	bne.n	8001390 <USART1_IRQHandler+0x84>
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <USART1_IRQHandler+0x94>)
 8001362:	881b      	ldrh	r3, [r3, #0]
 8001364:	3b03      	subs	r3, #3
 8001366:	4a0f      	ldr	r2, [pc, #60]	; (80013a4 <USART1_IRQHandler+0x98>)
 8001368:	5cd3      	ldrb	r3, [r2, r3]
 800136a:	2b0a      	cmp	r3, #10
 800136c:	d110      	bne.n	8001390 <USART1_IRQHandler+0x84>
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <USART1_IRQHandler+0x94>)
 8001370:	881b      	ldrh	r3, [r3, #0]
 8001372:	3b02      	subs	r3, #2
 8001374:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <USART1_IRQHandler+0x98>)
 8001376:	5cd3      	ldrb	r3, [r2, r3]
 8001378:	2b0d      	cmp	r3, #13
 800137a:	d109      	bne.n	8001390 <USART1_IRQHandler+0x84>
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <USART1_IRQHandler+0x94>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	3b01      	subs	r3, #1
 8001382:	4a08      	ldr	r2, [pc, #32]	; (80013a4 <USART1_IRQHandler+0x98>)
 8001384:	5cd3      	ldrb	r3, [r2, r3]
 8001386:	2b0a      	cmp	r3, #10
 8001388:	d102      	bne.n	8001390 <USART1_IRQHandler+0x84>
			messageHandlerFlag = 1;
 800138a:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <USART1_IRQHandler+0xa4>)
 800138c:	2201      	movs	r2, #1
 800138e:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001390:	4805      	ldr	r0, [pc, #20]	; (80013a8 <USART1_IRQHandler+0x9c>)
 8001392:	f002 fdbf 	bl	8003f14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000009e 	.word	0x2000009e
 80013a0:	2000009c 	.word	0x2000009c
 80013a4:	200000b0 	.word	0x200000b0
 80013a8:	2000091c 	.word	0x2000091c
 80013ac:	2000087f 	.word	0x2000087f
 80013b0:	200000a0 	.word	0x200000a0

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	; (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	; (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	; (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	; (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f003 f98e 	bl	8004704 <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	; (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	; (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20005000 	.word	0x20005000
 8001414:	00000400 	.word	0x00000400
 8001418:	200000a4 	.word	0x200000a4
 800141c:	200009c0 	.word	0x200009c0

08001420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800142c:	480c      	ldr	r0, [pc, #48]	; (8001460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800142e:	490d      	ldr	r1, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001430:	4a0d      	ldr	r2, [pc, #52]	; (8001468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001444:	4c0a      	ldr	r4, [pc, #40]	; (8001470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001452:	f7ff ffe5 	bl	8001420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f003 f95b 	bl	8004710 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800145a:	f7ff fbcb 	bl	8000bf4 <main>
  bx lr
 800145e:	4770      	bx	lr
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001468:	08005220 	.word	0x08005220
  ldr r2, =_sbss
 800146c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001470:	200009bc 	.word	0x200009bc

08001474 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC1_2_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <HAL_Init+0x28>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_Init+0x28>)
 8001482:	f043 0310 	orr.w	r3, r3, #16
 8001486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 f947 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	200f      	movs	r0, #15
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fdac 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 f95f 	bl	8001786 <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f000 f927 	bl	8001732 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	; (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000008 	.word	0x20000008
 80014fc:	20000010 	.word	0x20000010
 8001500:	2000000c 	.word	0x2000000c

08001504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_IncTick+0x1c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <HAL_IncTick+0x20>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a03      	ldr	r2, [pc, #12]	; (8001524 <HAL_IncTick+0x20>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	20000010 	.word	0x20000010
 8001524:	200009a8 	.word	0x200009a8

08001528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  return uwTick;
 800152c:	4b02      	ldr	r3, [pc, #8]	; (8001538 <HAL_GetTick+0x10>)
 800152e:	681b      	ldr	r3, [r3, #0]
}
 8001530:	4618      	mov	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr
 8001538:	200009a8 	.word	0x200009a8

0800153c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001544:	f7ff fff0 	bl	8001528 <HAL_GetTick>
 8001548:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001554:	d005      	beq.n	8001562 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <HAL_Delay+0x44>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	461a      	mov	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	4413      	add	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001562:	bf00      	nop
 8001564:	f7ff ffe0 	bl	8001528 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	429a      	cmp	r2, r3
 8001572:	d8f7      	bhi.n	8001564 <HAL_Delay+0x28>
  {
  }
}
 8001574:	bf00      	nop
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000010 	.word	0x20000010

08001584 <__NVIC_SetPriorityGrouping>:
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001594:	4b0c      	ldr	r3, [pc, #48]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159a:	68ba      	ldr	r2, [r7, #8]
 800159c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a0:	4013      	ands	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b6:	4a04      	ldr	r2, [pc, #16]	; (80015c8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	60d3      	str	r3, [r2, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bc80      	pop	{r7}
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000ed00 	.word	0xe000ed00

080015cc <__NVIC_GetPriorityGrouping>:
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <__NVIC_GetPriorityGrouping+0x18>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	f003 0307 	and.w	r3, r3, #7
}
 80015da:	4618      	mov	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_EnableIRQ>:
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	db0b      	blt.n	8001612 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fa:	79fb      	ldrb	r3, [r7, #7]
 80015fc:	f003 021f 	and.w	r2, r3, #31
 8001600:	4906      	ldr	r1, [pc, #24]	; (800161c <__NVIC_EnableIRQ+0x34>)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	095b      	lsrs	r3, r3, #5
 8001608:	2001      	movs	r0, #1
 800160a:	fa00 f202 	lsl.w	r2, r0, r2
 800160e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff90 	bl	8001620 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff2d 	bl	8001584 <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001744:	f7ff ff42 	bl	80015cc <__NVIC_GetPriorityGrouping>
 8001748:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68b9      	ldr	r1, [r7, #8]
 800174e:	6978      	ldr	r0, [r7, #20]
 8001750:	f7ff ff90 	bl	8001674 <NVIC_EncodePriority>
 8001754:	4602      	mov	r2, r0
 8001756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff ff5f 	bl	8001620 <__NVIC_SetPriority>
}
 8001762:	bf00      	nop
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b082      	sub	sp, #8
 800176e:	af00      	add	r7, sp, #0
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff35 	bl	80015e8 <__NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff ffa2 	bl	80016d8 <SysTick_Config>
 8001794:	4603      	mov	r3, r0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d008      	beq.n	80017c6 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2204      	movs	r2, #4
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e020      	b.n	8001808 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 020e 	bic.w	r2, r2, #14
 80017d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 0201 	bic.w	r2, r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017ee:	2101      	movs	r1, #1
 80017f0:	fa01 f202 	lsl.w	r2, r1, r2
 80017f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	bc80      	pop	{r7}
 8001810:	4770      	bx	lr
	...

08001814 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800181c:	2300      	movs	r3, #0
 800181e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001826:	2b02      	cmp	r3, #2
 8001828:	d005      	beq.n	8001836 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2204      	movs	r2, #4
 800182e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
 8001834:	e051      	b.n	80018da <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 020e 	bic.w	r2, r2, #14
 8001844:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0201 	bic.w	r2, r2, #1
 8001854:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a22      	ldr	r2, [pc, #136]	; (80018e4 <HAL_DMA_Abort_IT+0xd0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d029      	beq.n	80018b4 <HAL_DMA_Abort_IT+0xa0>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a20      	ldr	r2, [pc, #128]	; (80018e8 <HAL_DMA_Abort_IT+0xd4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d022      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x9c>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_DMA_Abort_IT+0xd8>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d01a      	beq.n	80018aa <HAL_DMA_Abort_IT+0x96>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_DMA_Abort_IT+0xdc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d012      	beq.n	80018a4 <HAL_DMA_Abort_IT+0x90>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_DMA_Abort_IT+0xe0>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00a      	beq.n	800189e <HAL_DMA_Abort_IT+0x8a>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a1a      	ldr	r2, [pc, #104]	; (80018f8 <HAL_DMA_Abort_IT+0xe4>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d102      	bne.n	8001898 <HAL_DMA_Abort_IT+0x84>
 8001892:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001896:	e00e      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 8001898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800189c:	e00b      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 800189e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018a2:	e008      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a8:	e005      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ae:	e002      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018b0:	2310      	movs	r3, #16
 80018b2:	e000      	b.n	80018b6 <HAL_DMA_Abort_IT+0xa2>
 80018b4:	2301      	movs	r3, #1
 80018b6:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_DMA_Abort_IT+0xe8>)
 80018b8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2201      	movs	r2, #1
 80018be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d003      	beq.n	80018da <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
    } 
  }
  return status;
 80018da:	7bfb      	ldrb	r3, [r7, #15]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	40020008 	.word	0x40020008
 80018e8:	4002001c 	.word	0x4002001c
 80018ec:	40020030 	.word	0x40020030
 80018f0:	40020044 	.word	0x40020044
 80018f4:	40020058 	.word	0x40020058
 80018f8:	4002006c 	.word	0x4002006c
 80018fc:	40020000 	.word	0x40020000

08001900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001900:	b480      	push	{r7}
 8001902:	b08b      	sub	sp, #44	; 0x2c
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800190a:	2300      	movs	r3, #0
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800190e:	2300      	movs	r3, #0
 8001910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001912:	e169      	b.n	8001be8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001914:	2201      	movs	r2, #1
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	69fa      	ldr	r2, [r7, #28]
 8001924:	4013      	ands	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	429a      	cmp	r2, r3
 800192e:	f040 8158 	bne.w	8001be2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	4a9a      	ldr	r2, [pc, #616]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d05e      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 800193c:	4a98      	ldr	r2, [pc, #608]	; (8001ba0 <HAL_GPIO_Init+0x2a0>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d875      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001942:	4a98      	ldr	r2, [pc, #608]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d058      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001948:	4a96      	ldr	r2, [pc, #600]	; (8001ba4 <HAL_GPIO_Init+0x2a4>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d86f      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800194e:	4a96      	ldr	r2, [pc, #600]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d052      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001954:	4a94      	ldr	r2, [pc, #592]	; (8001ba8 <HAL_GPIO_Init+0x2a8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d869      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800195a:	4a94      	ldr	r2, [pc, #592]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d04c      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 8001960:	4a92      	ldr	r2, [pc, #584]	; (8001bac <HAL_GPIO_Init+0x2ac>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d863      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001966:	4a92      	ldr	r2, [pc, #584]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d046      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
 800196c:	4a90      	ldr	r2, [pc, #576]	; (8001bb0 <HAL_GPIO_Init+0x2b0>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d85d      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 8001972:	2b12      	cmp	r3, #18
 8001974:	d82a      	bhi.n	80019cc <HAL_GPIO_Init+0xcc>
 8001976:	2b12      	cmp	r3, #18
 8001978:	d859      	bhi.n	8001a2e <HAL_GPIO_Init+0x12e>
 800197a:	a201      	add	r2, pc, #4	; (adr r2, 8001980 <HAL_GPIO_Init+0x80>)
 800197c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001980:	080019fb 	.word	0x080019fb
 8001984:	080019d5 	.word	0x080019d5
 8001988:	080019e7 	.word	0x080019e7
 800198c:	08001a29 	.word	0x08001a29
 8001990:	08001a2f 	.word	0x08001a2f
 8001994:	08001a2f 	.word	0x08001a2f
 8001998:	08001a2f 	.word	0x08001a2f
 800199c:	08001a2f 	.word	0x08001a2f
 80019a0:	08001a2f 	.word	0x08001a2f
 80019a4:	08001a2f 	.word	0x08001a2f
 80019a8:	08001a2f 	.word	0x08001a2f
 80019ac:	08001a2f 	.word	0x08001a2f
 80019b0:	08001a2f 	.word	0x08001a2f
 80019b4:	08001a2f 	.word	0x08001a2f
 80019b8:	08001a2f 	.word	0x08001a2f
 80019bc:	08001a2f 	.word	0x08001a2f
 80019c0:	08001a2f 	.word	0x08001a2f
 80019c4:	080019dd 	.word	0x080019dd
 80019c8:	080019f1 	.word	0x080019f1
 80019cc:	4a79      	ldr	r2, [pc, #484]	; (8001bb4 <HAL_GPIO_Init+0x2b4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d013      	beq.n	80019fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019d2:	e02c      	b.n	8001a2e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	623b      	str	r3, [r7, #32]
          break;
 80019da:	e029      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	3304      	adds	r3, #4
 80019e2:	623b      	str	r3, [r7, #32]
          break;
 80019e4:	e024      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	3308      	adds	r3, #8
 80019ec:	623b      	str	r3, [r7, #32]
          break;
 80019ee:	e01f      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	330c      	adds	r3, #12
 80019f6:	623b      	str	r3, [r7, #32]
          break;
 80019f8:	e01a      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d102      	bne.n	8001a08 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a02:	2304      	movs	r3, #4
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e013      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d105      	bne.n	8001a1c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a10:	2308      	movs	r3, #8
 8001a12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	611a      	str	r2, [r3, #16]
          break;
 8001a1a:	e009      	b.n	8001a30 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69fa      	ldr	r2, [r7, #28]
 8001a24:	615a      	str	r2, [r3, #20]
          break;
 8001a26:	e003      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	623b      	str	r3, [r7, #32]
          break;
 8001a2c:	e000      	b.n	8001a30 <HAL_GPIO_Init+0x130>
          break;
 8001a2e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	2bff      	cmp	r3, #255	; 0xff
 8001a34:	d801      	bhi.n	8001a3a <HAL_GPIO_Init+0x13a>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	e001      	b.n	8001a3e <HAL_GPIO_Init+0x13e>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3304      	adds	r3, #4
 8001a3e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	2bff      	cmp	r3, #255	; 0xff
 8001a44:	d802      	bhi.n	8001a4c <HAL_GPIO_Init+0x14c>
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	e002      	b.n	8001a52 <HAL_GPIO_Init+0x152>
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	3b08      	subs	r3, #8
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	210f      	movs	r1, #15
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	401a      	ands	r2, r3
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 80b1 	beq.w	8001be2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a80:	4b4d      	ldr	r3, [pc, #308]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	4a4c      	ldr	r2, [pc, #304]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6193      	str	r3, [r2, #24]
 8001a8c:	4b4a      	ldr	r3, [pc, #296]	; (8001bb8 <HAL_GPIO_Init+0x2b8>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a98:	4a48      	ldr	r2, [pc, #288]	; (8001bbc <HAL_GPIO_Init+0x2bc>)
 8001a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a9c:	089b      	lsrs	r3, r3, #2
 8001a9e:	3302      	adds	r3, #2
 8001aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	220f      	movs	r2, #15
 8001ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <HAL_GPIO_Init+0x2c0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d013      	beq.n	8001aec <HAL_GPIO_Init+0x1ec>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a3f      	ldr	r2, [pc, #252]	; (8001bc4 <HAL_GPIO_Init+0x2c4>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d00d      	beq.n	8001ae8 <HAL_GPIO_Init+0x1e8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	4a3e      	ldr	r2, [pc, #248]	; (8001bc8 <HAL_GPIO_Init+0x2c8>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d007      	beq.n	8001ae4 <HAL_GPIO_Init+0x1e4>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a3d      	ldr	r2, [pc, #244]	; (8001bcc <HAL_GPIO_Init+0x2cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d101      	bne.n	8001ae0 <HAL_GPIO_Init+0x1e0>
 8001adc:	2303      	movs	r3, #3
 8001ade:	e006      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae0:	2304      	movs	r3, #4
 8001ae2:	e004      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	e002      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_GPIO_Init+0x1ee>
 8001aec:	2300      	movs	r3, #0
 8001aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af0:	f002 0203 	and.w	r2, r2, #3
 8001af4:	0092      	lsls	r2, r2, #2
 8001af6:	4093      	lsls	r3, r2
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001afe:	492f      	ldr	r1, [pc, #188]	; (8001bbc <HAL_GPIO_Init+0x2bc>)
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	089b      	lsrs	r3, r3, #2
 8001b04:	3302      	adds	r3, #2
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b18:	4b2d      	ldr	r3, [pc, #180]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	492c      	ldr	r1, [pc, #176]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	600b      	str	r3, [r1, #0]
 8001b24:	e006      	b.n	8001b34 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b26:	4b2a      	ldr	r3, [pc, #168]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	4928      	ldr	r1, [pc, #160]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	4922      	ldr	r1, [pc, #136]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	604b      	str	r3, [r1, #4]
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b4e:	4b20      	ldr	r3, [pc, #128]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b50:	685a      	ldr	r2, [r3, #4]
 8001b52:	69bb      	ldr	r3, [r7, #24]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	491e      	ldr	r1, [pc, #120]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b58:	4013      	ands	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d006      	beq.n	8001b76 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4918      	ldr	r1, [pc, #96]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	4313      	orrs	r3, r2
 8001b72:	608b      	str	r3, [r1, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b76:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	4914      	ldr	r1, [pc, #80]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b80:	4013      	ands	r3, r2
 8001b82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d021      	beq.n	8001bd4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b90:	4b0f      	ldr	r3, [pc, #60]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b92:	68da      	ldr	r2, [r3, #12]
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_GPIO_Init+0x2d0>)
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	60cb      	str	r3, [r1, #12]
 8001b9c:	e021      	b.n	8001be2 <HAL_GPIO_Init+0x2e2>
 8001b9e:	bf00      	nop
 8001ba0:	10320000 	.word	0x10320000
 8001ba4:	10310000 	.word	0x10310000
 8001ba8:	10220000 	.word	0x10220000
 8001bac:	10210000 	.word	0x10210000
 8001bb0:	10120000 	.word	0x10120000
 8001bb4:	10110000 	.word	0x10110000
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	40010800 	.word	0x40010800
 8001bc4:	40010c00 	.word	0x40010c00
 8001bc8:	40011000 	.word	0x40011000
 8001bcc:	40011400 	.word	0x40011400
 8001bd0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bd4:	4b0b      	ldr	r3, [pc, #44]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_GPIO_Init+0x304>)
 8001bde:	4013      	ands	r3, r2
 8001be0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	3301      	adds	r3, #1
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f47f ae8e 	bne.w	8001914 <HAL_GPIO_Init+0x14>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	372c      	adds	r7, #44	; 0x2c
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	807b      	strh	r3, [r7, #2]
 8001c14:	4613      	mov	r3, r2
 8001c16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c18:	787b      	ldrb	r3, [r7, #1]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c1e:	887a      	ldrh	r2, [r7, #2]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001c24:	e003      	b.n	8001c2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001c26:	887b      	ldrh	r3, [r7, #2]
 8001c28:	041a      	lsls	r2, r3, #16
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	611a      	str	r2, [r3, #16]
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d101      	bne.n	8001c4a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	e12b      	b.n	8001ea2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d106      	bne.n	8001c64 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff f9f8 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2224      	movs	r2, #36	; 0x24
 8001c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f022 0201 	bic.w	r2, r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c8a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c9c:	f001 fb6e 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8001ca0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a81      	ldr	r2, [pc, #516]	; (8001eac <HAL_I2C_Init+0x274>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d807      	bhi.n	8001cbc <HAL_I2C_Init+0x84>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4a80      	ldr	r2, [pc, #512]	; (8001eb0 <HAL_I2C_Init+0x278>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	bf94      	ite	ls
 8001cb4:	2301      	movls	r3, #1
 8001cb6:	2300      	movhi	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e006      	b.n	8001cca <HAL_I2C_Init+0x92>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a7d      	ldr	r2, [pc, #500]	; (8001eb4 <HAL_I2C_Init+0x27c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0e7      	b.n	8001ea2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4a78      	ldr	r2, [pc, #480]	; (8001eb8 <HAL_I2C_Init+0x280>)
 8001cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cda:	0c9b      	lsrs	r3, r3, #18
 8001cdc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4a6a      	ldr	r2, [pc, #424]	; (8001eac <HAL_I2C_Init+0x274>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d802      	bhi.n	8001d0c <HAL_I2C_Init+0xd4>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	e009      	b.n	8001d20 <HAL_I2C_Init+0xe8>
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d12:	fb02 f303 	mul.w	r3, r2, r3
 8001d16:	4a69      	ldr	r2, [pc, #420]	; (8001ebc <HAL_I2C_Init+0x284>)
 8001d18:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1c:	099b      	lsrs	r3, r3, #6
 8001d1e:	3301      	adds	r3, #1
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	430b      	orrs	r3, r1
 8001d26:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d32:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	495c      	ldr	r1, [pc, #368]	; (8001eac <HAL_I2C_Init+0x274>)
 8001d3c:	428b      	cmp	r3, r1
 8001d3e:	d819      	bhi.n	8001d74 <HAL_I2C_Init+0x13c>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1e59      	subs	r1, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d4e:	1c59      	adds	r1, r3, #1
 8001d50:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d54:	400b      	ands	r3, r1
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_I2C_Init+0x138>
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1e59      	subs	r1, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	e051      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001d70:	2304      	movs	r3, #4
 8001d72:	e04f      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d111      	bne.n	8001da0 <HAL_I2C_Init+0x168>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	1e58      	subs	r0, r3, #1
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6859      	ldr	r1, [r3, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	e012      	b.n	8001dc6 <HAL_I2C_Init+0x18e>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	1e58      	subs	r0, r3, #1
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6859      	ldr	r1, [r3, #4]
 8001da8:	460b      	mov	r3, r1
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	440b      	add	r3, r1
 8001dae:	0099      	lsls	r1, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001db6:	3301      	adds	r3, #1
 8001db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_I2C_Init+0x196>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e022      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d10e      	bne.n	8001df4 <HAL_I2C_Init+0x1bc>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1e58      	subs	r0, r3, #1
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6859      	ldr	r1, [r3, #4]
 8001dde:	460b      	mov	r3, r1
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	440b      	add	r3, r1
 8001de4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de8:	3301      	adds	r3, #1
 8001dea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001df2:	e00f      	b.n	8001e14 <HAL_I2C_Init+0x1dc>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	1e58      	subs	r0, r3, #1
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6859      	ldr	r1, [r3, #4]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	440b      	add	r3, r1
 8001e02:	0099      	lsls	r1, r3, #2
 8001e04:	440b      	add	r3, r1
 8001e06:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	6809      	ldr	r1, [r1, #0]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69da      	ldr	r2, [r3, #28]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a1b      	ldr	r3, [r3, #32]
 8001e2e:	431a      	orrs	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e42:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6911      	ldr	r1, [r2, #16]
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68d2      	ldr	r2, [r2, #12]
 8001e4e:	4311      	orrs	r1, r2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	431a      	orrs	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	000186a0 	.word	0x000186a0
 8001eb0:	001e847f 	.word	0x001e847f
 8001eb4:	003d08ff 	.word	0x003d08ff
 8001eb8:	431bde83 	.word	0x431bde83
 8001ebc:	10624dd3 	.word	0x10624dd3

08001ec0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af02      	add	r7, sp, #8
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	607a      	str	r2, [r7, #4]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	460b      	mov	r3, r1
 8001ece:	817b      	strh	r3, [r7, #10]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff fb28 	bl	8001528 <HAL_GetTick>
 8001ed8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	2b20      	cmp	r3, #32
 8001ee4:	f040 80e0 	bne.w	80020a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	2319      	movs	r3, #25
 8001eee:	2201      	movs	r2, #1
 8001ef0:	4970      	ldr	r1, [pc, #448]	; (80020b4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ef2:	68f8      	ldr	r0, [r7, #12]
 8001ef4:	f000 fc92 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	e0d3      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_I2C_Master_Transmit+0x50>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0cc      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0301 	and.w	r3, r3, #1
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d007      	beq.n	8001f36 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2221      	movs	r2, #33	; 0x21
 8001f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2210      	movs	r2, #16
 8001f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	893a      	ldrh	r2, [r7, #8]
 8001f66:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a50      	ldr	r2, [pc, #320]	; (80020b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f78:	8979      	ldrh	r1, [r7, #10]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6a3a      	ldr	r2, [r7, #32]
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 fafc 	bl	800257c <I2C_MasterRequestWrite>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e08d      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001fa4:	e066      	b.n	8002074 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	6a39      	ldr	r1, [r7, #32]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fd0c 	bl	80029c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00d      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	2b04      	cmp	r3, #4
 8001fbc:	d107      	bne.n	8001fce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fcc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e06b      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	1c5a      	adds	r2, r3, #1
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	3b01      	subs	r3, #1
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b04      	cmp	r3, #4
 800200e:	d11b      	bne.n	8002048 <HAL_I2C_Master_Transmit+0x188>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002014:	2b00      	cmp	r3, #0
 8002016:	d017      	beq.n	8002048 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800201c:	781a      	ldrb	r2, [r3, #0]
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002032:	b29b      	uxth	r3, r3
 8002034:	3b01      	subs	r3, #1
 8002036:	b29a      	uxth	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002040:	3b01      	subs	r3, #1
 8002042:	b29a      	uxth	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	6a39      	ldr	r1, [r7, #32]
 800204c:	68f8      	ldr	r0, [r7, #12]
 800204e:	f000 fcfc 	bl	8002a4a <I2C_WaitOnBTFFlagUntilTimeout>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d00d      	beq.n	8002074 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	2b04      	cmp	r3, #4
 800205e:	d107      	bne.n	8002070 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800206e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e01a      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002078:	2b00      	cmp	r3, #0
 800207a:	d194      	bne.n	8001fa6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800208a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	00100002 	.word	0x00100002
 80020b8:	ffff0000 	.word	0xffff0000

080020bc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08c      	sub	sp, #48	; 0x30
 80020c0:	af02      	add	r7, sp, #8
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	461a      	mov	r2, r3
 80020c8:	460b      	mov	r3, r1
 80020ca:	817b      	strh	r3, [r7, #10]
 80020cc:	4613      	mov	r3, r2
 80020ce:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80020d0:	2300      	movs	r3, #0
 80020d2:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020d4:	f7ff fa28 	bl	8001528 <HAL_GetTick>
 80020d8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	f040 823f 	bne.w	8002566 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2319      	movs	r3, #25
 80020ee:	2201      	movs	r2, #1
 80020f0:	497f      	ldr	r1, [pc, #508]	; (80022f0 <HAL_I2C_Master_Receive+0x234>)
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fb92 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80020fe:	2302      	movs	r3, #2
 8002100:	e232      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002108:	2b01      	cmp	r3, #1
 800210a:	d101      	bne.n	8002110 <HAL_I2C_Master_Receive+0x54>
 800210c:	2302      	movs	r3, #2
 800210e:	e22b      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b01      	cmp	r3, #1
 8002124:	d007      	beq.n	8002136 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f042 0201 	orr.w	r2, r2, #1
 8002134:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002144:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2222      	movs	r2, #34	; 0x22
 800214a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2210      	movs	r2, #16
 8002152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	893a      	ldrh	r2, [r7, #8]
 8002166:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216c:	b29a      	uxth	r2, r3
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	4a5f      	ldr	r2, [pc, #380]	; (80022f4 <HAL_I2C_Master_Receive+0x238>)
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002178:	8979      	ldrh	r1, [r7, #10]
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa7e 	bl	8002680 <I2C_MasterRequestRead>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e1ec      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002192:	2b00      	cmp	r3, #0
 8002194:	d113      	bne.n	80021be <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	61fb      	str	r3, [r7, #28]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	61fb      	str	r3, [r7, #28]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	61fb      	str	r3, [r7, #28]
 80021aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	e1c0      	b.n	8002540 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d11e      	bne.n	8002204 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80021d6:	b672      	cpsid	i
}
 80021d8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fe:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002200:	b662      	cpsie	i
}
 8002202:	e035      	b.n	8002270 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002208:	2b02      	cmp	r3, #2
 800220a:	d11e      	bne.n	800224a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800221a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	617b      	str	r3, [r7, #20]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002244:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002246:	b662      	cpsie	i
}
 8002248:	e012      	b.n	8002270 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	613b      	str	r3, [r7, #16]
 800226e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002270:	e166      	b.n	8002540 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002276:	2b03      	cmp	r3, #3
 8002278:	f200 811f 	bhi.w	80024ba <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b01      	cmp	r3, #1
 8002282:	d123      	bne.n	80022cc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002286:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fc1f 	bl	8002acc <I2C_WaitOnRXNEFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e167      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	b2d2      	uxtb	r2, r2
 80022a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b4:	3b01      	subs	r3, #1
 80022b6:	b29a      	uxth	r2, r3
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80022ca:	e139      	b.n	8002540 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d152      	bne.n	800237a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	9300      	str	r3, [sp, #0]
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	2200      	movs	r2, #0
 80022dc:	4906      	ldr	r1, [pc, #24]	; (80022f8 <HAL_I2C_Master_Receive+0x23c>)
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f000 fa9c 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e13c      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
 80022ee:	bf00      	nop
 80022f0:	00100002 	.word	0x00100002
 80022f4:	ffff0000 	.word	0xffff0000
 80022f8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80022fc:	b672      	cpsid	i
}
 80022fe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800230e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002342:	b662      	cpsie	i
}
 8002344:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691a      	ldr	r2, [r3, #16]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002362:	3b01      	subs	r3, #1
 8002364:	b29a      	uxth	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002378:	e0e2      	b.n	8002540 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002380:	2200      	movs	r2, #0
 8002382:	497b      	ldr	r1, [pc, #492]	; (8002570 <HAL_I2C_Master_Receive+0x4b4>)
 8002384:	68f8      	ldr	r0, [r7, #12]
 8002386:	f000 fa49 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0e9      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80023a4:	b672      	cpsid	i
}
 80023a6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80023da:	4b66      	ldr	r3, [pc, #408]	; (8002574 <HAL_I2C_Master_Receive+0x4b8>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	08db      	lsrs	r3, r3, #3
 80023e0:	4a65      	ldr	r2, [pc, #404]	; (8002578 <HAL_I2C_Master_Receive+0x4bc>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	0a1a      	lsrs	r2, r3, #8
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00da      	lsls	r2, r3, #3
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d118      	bne.n	8002432 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2220      	movs	r2, #32
 800240a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2200      	movs	r2, #0
 8002412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	f043 0220 	orr.w	r2, r3, #32
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002422:	b662      	cpsie	i
}
 8002424:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e09a      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b04      	cmp	r3, #4
 800243e:	d1d9      	bne.n	80023f4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691a      	ldr	r2, [r3, #16]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800246c:	3b01      	subs	r3, #1
 800246e:	b29a      	uxth	r2, r3
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002478:	b29b      	uxth	r3, r3
 800247a:	3b01      	subs	r3, #1
 800247c:	b29a      	uxth	r2, r3
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002482:	b662      	cpsie	i
}
 8002484:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024b8:	e042      	b.n	8002540 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024bc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 fb04 	bl	8002acc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e04c      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ea:	3b01      	subs	r3, #1
 80024ec:	b29a      	uxth	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b04      	cmp	r3, #4
 800250c:	d118      	bne.n	8002540 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691a      	ldr	r2, [r3, #16]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002520:	1c5a      	adds	r2, r3, #1
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002536:	b29b      	uxth	r3, r3
 8002538:	3b01      	subs	r3, #1
 800253a:	b29a      	uxth	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	f47f ae94 	bne.w	8002272 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	e000      	b.n	8002568 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8002566:	2302      	movs	r3, #2
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	3728      	adds	r7, #40	; 0x28
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	00010004 	.word	0x00010004
 8002574:	20000008 	.word	0x20000008
 8002578:	14f8b589 	.word	0x14f8b589

0800257c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	460b      	mov	r3, r1
 800258a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002590:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	2b08      	cmp	r3, #8
 8002596:	d006      	beq.n	80025a6 <I2C_MasterRequestWrite+0x2a>
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d003      	beq.n	80025a6 <I2C_MasterRequestWrite+0x2a>
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025a4:	d108      	bne.n	80025b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025b4:	601a      	str	r2, [r3, #0]
 80025b6:	e00b      	b.n	80025d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025bc:	2b12      	cmp	r3, #18
 80025be:	d107      	bne.n	80025d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f000 f91d 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00d      	beq.n	8002604 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025f6:	d103      	bne.n	8002600 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e035      	b.n	8002670 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800260c:	d108      	bne.n	8002620 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800260e:	897b      	ldrh	r3, [r7, #10]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800261c:	611a      	str	r2, [r3, #16]
 800261e:	e01b      	b.n	8002658 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002620:	897b      	ldrh	r3, [r7, #10]
 8002622:	11db      	asrs	r3, r3, #7
 8002624:	b2db      	uxtb	r3, r3
 8002626:	f003 0306 	and.w	r3, r3, #6
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f063 030f 	orn	r3, r3, #15
 8002630:	b2da      	uxtb	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	490e      	ldr	r1, [pc, #56]	; (8002678 <I2C_MasterRequestWrite+0xfc>)
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f000 f943 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e010      	b.n	8002670 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800264e:	897b      	ldrh	r3, [r7, #10]
 8002650:	b2da      	uxtb	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <I2C_MasterRequestWrite+0x100>)
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f000 f933 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	00010008 	.word	0x00010008
 800267c:	00010002 	.word	0x00010002

08002680 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b088      	sub	sp, #32
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
 800268c:	460b      	mov	r3, r1
 800268e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b08      	cmp	r3, #8
 80026aa:	d006      	beq.n	80026ba <I2C_MasterRequestRead+0x3a>
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d003      	beq.n	80026ba <I2C_MasterRequestRead+0x3a>
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026b8:	d108      	bne.n	80026cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	e00b      	b.n	80026e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	2b11      	cmp	r3, #17
 80026d2:	d107      	bne.n	80026e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 f893 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002706:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270a:	d103      	bne.n	8002714 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002712:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e079      	b.n	800280c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002720:	d108      	bne.n	8002734 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002722:	897b      	ldrh	r3, [r7, #10]
 8002724:	b2db      	uxtb	r3, r3
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	b2da      	uxtb	r2, r3
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	e05f      	b.n	80027f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002734:	897b      	ldrh	r3, [r7, #10]
 8002736:	11db      	asrs	r3, r3, #7
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0306 	and.w	r3, r3, #6
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f063 030f 	orn	r3, r3, #15
 8002744:	b2da      	uxtb	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4930      	ldr	r1, [pc, #192]	; (8002814 <I2C_MasterRequestRead+0x194>)
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 f8b9 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d001      	beq.n	8002762 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	e054      	b.n	800280c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002762:	897b      	ldrh	r3, [r7, #10]
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	4929      	ldr	r1, [pc, #164]	; (8002818 <I2C_MasterRequestRead+0x198>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f8a9 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e044      	b.n	800280c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 f831 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d00d      	beq.n	80027dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ce:	d103      	bne.n	80027d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e017      	b.n	800280c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80027dc:	897b      	ldrh	r3, [r7, #10]
 80027de:	11db      	asrs	r3, r3, #7
 80027e0:	b2db      	uxtb	r3, r3
 80027e2:	f003 0306 	and.w	r3, r3, #6
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f063 030e 	orn	r3, r3, #14
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <I2C_MasterRequestRead+0x198>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f865 	bl	80028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00010008 	.word	0x00010008
 8002818:	00010002 	.word	0x00010002

0800281c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282c:	e025      	b.n	800287a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d021      	beq.n	800287a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7fe fe77 	bl	8001528 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d116      	bne.n	800287a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2220      	movs	r2, #32
 8002856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e023      	b.n	80028c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10d      	bne.n	80028a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	43da      	mvns	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4013      	ands	r3, r2
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	bf0c      	ite	eq
 8002896:	2301      	moveq	r3, #1
 8002898:	2300      	movne	r3, #0
 800289a:	b2db      	uxtb	r3, r3
 800289c:	461a      	mov	r2, r3
 800289e:	e00c      	b.n	80028ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	43da      	mvns	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4013      	ands	r3, r2
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bf0c      	ite	eq
 80028b2:	2301      	moveq	r3, #1
 80028b4:	2300      	movne	r3, #0
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	461a      	mov	r2, r3
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d0b6      	beq.n	800282e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3710      	adds	r7, #16
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b084      	sub	sp, #16
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	60f8      	str	r0, [r7, #12]
 80028d2:	60b9      	str	r1, [r7, #8]
 80028d4:	607a      	str	r2, [r7, #4]
 80028d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80028d8:	e051      	b.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028e8:	d123      	bne.n	8002932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002902:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	f043 0204 	orr.w	r2, r3, #4
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e046      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002938:	d021      	beq.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800293a:	f7fe fdf5 	bl	8001528 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	429a      	cmp	r2, r3
 8002948:	d302      	bcc.n	8002950 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d116      	bne.n	800297e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2220      	movs	r2, #32
 800295a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e020      	b.n	80029c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	0c1b      	lsrs	r3, r3, #16
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d10c      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	43da      	mvns	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4013      	ands	r3, r2
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	bf14      	ite	ne
 800299a:	2301      	movne	r3, #1
 800299c:	2300      	moveq	r3, #0
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	e00b      	b.n	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	43da      	mvns	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	bf14      	ite	ne
 80029b4:	2301      	movne	r3, #1
 80029b6:	2300      	moveq	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d18d      	bne.n	80028da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80029d4:	e02d      	b.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80029d6:	68f8      	ldr	r0, [r7, #12]
 80029d8:	f000 f8ce 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d001      	beq.n	80029e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e02d      	b.n	8002a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d021      	beq.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029ee:	f7fe fd9b 	bl	8001528 <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	68ba      	ldr	r2, [r7, #8]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d302      	bcc.n	8002a04 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2200      	movs	r2, #0
 8002a08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f043 0220 	orr.w	r2, r3, #32
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e007      	b.n	8002a42 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3c:	2b80      	cmp	r3, #128	; 0x80
 8002a3e:	d1ca      	bne.n	80029d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b084      	sub	sp, #16
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a56:	e02d      	b.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 f88d 	bl	8002b78 <I2C_IsAcknowledgeFailed>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e02d      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6e:	d021      	beq.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a70:	f7fe fd5a 	bl	8001528 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d302      	bcc.n	8002a86 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d116      	bne.n	8002ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	f043 0220 	orr.w	r2, r3, #32
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e007      	b.n	8002ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	f003 0304 	and.w	r3, r3, #4
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d1ca      	bne.n	8002a58 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ad8:	e042      	b.n	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d119      	bne.n	8002b1c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0210 	mvn.w	r2, #16
 8002af0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e029      	b.n	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b1c:	f7fe fd04 	bl	8001528 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d302      	bcc.n	8002b32 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d116      	bne.n	8002b60 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e007      	b.n	8002b70 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6a:	2b40      	cmp	r3, #64	; 0x40
 8002b6c:	d1b5      	bne.n	8002ada <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b6e:	2300      	movs	r3, #0
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3710      	adds	r7, #16
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b8e:	d11b      	bne.n	8002bc8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b98:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0204 	orr.w	r2, r3, #4
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e000      	b.n	8002bca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	370c      	adds	r7, #12
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bc80      	pop	{r7}
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e26c      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	f000 8087 	beq.w	8002d02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bf4:	4b92      	ldr	r3, [pc, #584]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 030c 	and.w	r3, r3, #12
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d00c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c00:	4b8f      	ldr	r3, [pc, #572]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d112      	bne.n	8002c32 <HAL_RCC_OscConfig+0x5e>
 8002c0c:	4b8c      	ldr	r3, [pc, #560]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c18:	d10b      	bne.n	8002c32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1a:	4b89      	ldr	r3, [pc, #548]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d06c      	beq.n	8002d00 <HAL_RCC_OscConfig+0x12c>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d168      	bne.n	8002d00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e246      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x76>
 8002c3c:	4b80      	ldr	r3, [pc, #512]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7f      	ldr	r2, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c46:	6013      	str	r3, [r2, #0]
 8002c48:	e02e      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x98>
 8002c52:	4b7b      	ldr	r3, [pc, #492]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a7a      	ldr	r2, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	4b78      	ldr	r3, [pc, #480]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a77      	ldr	r2, [pc, #476]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c68:	6013      	str	r3, [r2, #0]
 8002c6a:	e01d      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c74:	d10c      	bne.n	8002c90 <HAL_RCC_OscConfig+0xbc>
 8002c76:	4b72      	ldr	r3, [pc, #456]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a71      	ldr	r2, [pc, #452]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	6013      	str	r3, [r2, #0]
 8002c82:	4b6f      	ldr	r3, [pc, #444]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a6e      	ldr	r2, [pc, #440]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c8c:	6013      	str	r3, [r2, #0]
 8002c8e:	e00b      	b.n	8002ca8 <HAL_RCC_OscConfig+0xd4>
 8002c90:	4b6b      	ldr	r3, [pc, #428]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a6a      	ldr	r2, [pc, #424]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b68      	ldr	r3, [pc, #416]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a67      	ldr	r2, [pc, #412]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d013      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe fc3a 	bl	8001528 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7fe fc36 	bl	8001528 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	; 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1fa      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cca:	4b5d      	ldr	r3, [pc, #372]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d0f0      	beq.n	8002cb8 <HAL_RCC_OscConfig+0xe4>
 8002cd6:	e014      	b.n	8002d02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd8:	f7fe fc26 	bl	8001528 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ce0:	f7fe fc22 	bl	8001528 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b64      	cmp	r3, #100	; 0x64
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e1e6      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cf2:	4b53      	ldr	r3, [pc, #332]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1f0      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x10c>
 8002cfe:	e000      	b.n	8002d02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d063      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d0e:	4b4c      	ldr	r3, [pc, #304]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00b      	beq.n	8002d32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d11c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x18c>
 8002d26:	4b46      	ldr	r3, [pc, #280]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d116      	bne.n	8002d60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d32:	4b43      	ldr	r3, [pc, #268]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <HAL_RCC_OscConfig+0x176>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d001      	beq.n	8002d4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e1ba      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d4a:	4b3d      	ldr	r3, [pc, #244]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	4939      	ldr	r1, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5e:	e03a      	b.n	8002dd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d020      	beq.n	8002daa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d68:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7fe fbdb 	bl	8001528 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d76:	f7fe fbd7 	bl	8001528 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e19b      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d88:	4b2d      	ldr	r3, [pc, #180]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0302 	and.w	r3, r3, #2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d0f0      	beq.n	8002d76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d94:	4b2a      	ldr	r3, [pc, #168]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	00db      	lsls	r3, r3, #3
 8002da2:	4927      	ldr	r1, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	600b      	str	r3, [r1, #0]
 8002da8:	e015      	b.n	8002dd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002daa:	4b26      	ldr	r3, [pc, #152]	; (8002e44 <HAL_RCC_OscConfig+0x270>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db0:	f7fe fbba 	bl	8001528 <HAL_GetTick>
 8002db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db6:	e008      	b.n	8002dca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db8:	f7fe fbb6 	bl	8001528 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d901      	bls.n	8002dca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e17a      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dca:	4b1d      	ldr	r3, [pc, #116]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d1f0      	bne.n	8002db8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03a      	beq.n	8002e58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d019      	beq.n	8002e1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dea:	4b17      	ldr	r3, [pc, #92]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002dec:	2201      	movs	r2, #1
 8002dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002df0:	f7fe fb9a 	bl	8001528 <HAL_GetTick>
 8002df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df6:	e008      	b.n	8002e0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df8:	f7fe fb96 	bl	8001528 <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d901      	bls.n	8002e0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e15a      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e0a:	4b0d      	ldr	r3, [pc, #52]	; (8002e40 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	f003 0302 	and.w	r3, r3, #2
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f0      	beq.n	8002df8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e16:	2001      	movs	r0, #1
 8002e18:	f000 fad8 	bl	80033cc <RCC_Delay>
 8002e1c:	e01c      	b.n	8002e58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e1e:	4b0a      	ldr	r3, [pc, #40]	; (8002e48 <HAL_RCC_OscConfig+0x274>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e24:	f7fe fb80 	bl	8001528 <HAL_GetTick>
 8002e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e2a:	e00f      	b.n	8002e4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe fb7c 	bl	8001528 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d908      	bls.n	8002e4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e140      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
 8002e3e:	bf00      	nop
 8002e40:	40021000 	.word	0x40021000
 8002e44:	42420000 	.word	0x42420000
 8002e48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e4c:	4b9e      	ldr	r3, [pc, #632]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e9      	bne.n	8002e2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 80a6 	beq.w	8002fb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e66:	2300      	movs	r3, #0
 8002e68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e6a:	4b97      	ldr	r3, [pc, #604]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e6c:	69db      	ldr	r3, [r3, #28]
 8002e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10d      	bne.n	8002e92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e76:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	4a93      	ldr	r2, [pc, #588]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	61d3      	str	r3, [r2, #28]
 8002e82:	4b91      	ldr	r3, [pc, #580]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002e84:	69db      	ldr	r3, [r3, #28]
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e92:	4b8e      	ldr	r3, [pc, #568]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d118      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e9e:	4b8b      	ldr	r3, [pc, #556]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a8a      	ldr	r2, [pc, #552]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fb3d 	bl	8001528 <HAL_GetTick>
 8002eae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002eb0:	e008      	b.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb2:	f7fe fb39 	bl	8001528 <HAL_GetTick>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1ad3      	subs	r3, r2, r3
 8002ebc:	2b64      	cmp	r3, #100	; 0x64
 8002ebe:	d901      	bls.n	8002ec4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	e0fd      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec4:	4b81      	ldr	r3, [pc, #516]	; (80030cc <HAL_RCC_OscConfig+0x4f8>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0f0      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x312>
 8002ed8:	4b7b      	ldr	r3, [pc, #492]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	4a7a      	ldr	r2, [pc, #488]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	6213      	str	r3, [r2, #32]
 8002ee4:	e02d      	b.n	8002f42 <HAL_RCC_OscConfig+0x36e>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x334>
 8002eee:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	4a75      	ldr	r2, [pc, #468]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ef4:	f023 0301 	bic.w	r3, r3, #1
 8002ef8:	6213      	str	r3, [r2, #32]
 8002efa:	4b73      	ldr	r3, [pc, #460]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	4a72      	ldr	r2, [pc, #456]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f00:	f023 0304 	bic.w	r3, r3, #4
 8002f04:	6213      	str	r3, [r2, #32]
 8002f06:	e01c      	b.n	8002f42 <HAL_RCC_OscConfig+0x36e>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	2b05      	cmp	r3, #5
 8002f0e:	d10c      	bne.n	8002f2a <HAL_RCC_OscConfig+0x356>
 8002f10:	4b6d      	ldr	r3, [pc, #436]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f12:	6a1b      	ldr	r3, [r3, #32]
 8002f14:	4a6c      	ldr	r2, [pc, #432]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f16:	f043 0304 	orr.w	r3, r3, #4
 8002f1a:	6213      	str	r3, [r2, #32]
 8002f1c:	4b6a      	ldr	r3, [pc, #424]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	4a69      	ldr	r2, [pc, #420]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	6213      	str	r3, [r2, #32]
 8002f28:	e00b      	b.n	8002f42 <HAL_RCC_OscConfig+0x36e>
 8002f2a:	4b67      	ldr	r3, [pc, #412]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	4a66      	ldr	r2, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f30:	f023 0301 	bic.w	r3, r3, #1
 8002f34:	6213      	str	r3, [r2, #32]
 8002f36:	4b64      	ldr	r3, [pc, #400]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	4a63      	ldr	r2, [pc, #396]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f3c:	f023 0304 	bic.w	r3, r3, #4
 8002f40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d015      	beq.n	8002f76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe faed 	bl	8001528 <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f50:	e00a      	b.n	8002f68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f52:	f7fe fae9 	bl	8001528 <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0ab      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f68:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ee      	beq.n	8002f52 <HAL_RCC_OscConfig+0x37e>
 8002f74:	e014      	b.n	8002fa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f76:	f7fe fad7 	bl	8001528 <HAL_GetTick>
 8002f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f7c:	e00a      	b.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7e:	f7fe fad3 	bl	8001528 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d901      	bls.n	8002f94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	e095      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f94:	4b4c      	ldr	r3, [pc, #304]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002f96:	6a1b      	ldr	r3, [r3, #32]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1ee      	bne.n	8002f7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d105      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa6:	4b48      	ldr	r3, [pc, #288]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	4a47      	ldr	r2, [pc, #284]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 8081 	beq.w	80030be <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b42      	ldr	r3, [pc, #264]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d061      	beq.n	800308c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d146      	bne.n	800305e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd0:	4b3f      	ldr	r3, [pc, #252]	; (80030d0 <HAL_RCC_OscConfig+0x4fc>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7fe faa7 	bl	8001528 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7fe faa3 	bl	8001528 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e067      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d1f0      	bne.n	8002fde <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a1b      	ldr	r3, [r3, #32]
 8003000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003004:	d108      	bne.n	8003018 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003006:	4b30      	ldr	r3, [pc, #192]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	492d      	ldr	r1, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003018:	4b2b      	ldr	r3, [pc, #172]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6a19      	ldr	r1, [r3, #32]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	430b      	orrs	r3, r1
 800302a:	4927      	ldr	r1, [pc, #156]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 800302c:	4313      	orrs	r3, r2
 800302e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x4fc>)
 8003032:	2201      	movs	r2, #1
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe fa77 	bl	8001528 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe fa73 	bl	8001528 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e037      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003050:	4b1d      	ldr	r3, [pc, #116]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x46a>
 800305c:	e02f      	b.n	80030be <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305e:	4b1c      	ldr	r3, [pc, #112]	; (80030d0 <HAL_RCC_OscConfig+0x4fc>)
 8003060:	2200      	movs	r2, #0
 8003062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fa60 	bl	8001528 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306c:	f7fe fa5c 	bl	8001528 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b02      	cmp	r3, #2
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e020      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0x498>
 800308a:	e018      	b.n	80030be <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e013      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003098:	4b0b      	ldr	r3, [pc, #44]	; (80030c8 <HAL_RCC_OscConfig+0x4f4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6a1b      	ldr	r3, [r3, #32]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40021000 	.word	0x40021000
 80030cc:	40007000 	.word	0x40007000
 80030d0:	42420060 	.word	0x42420060

080030d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0d0      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b6a      	ldr	r3, [pc, #424]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d910      	bls.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b67      	ldr	r3, [pc, #412]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f023 0207 	bic.w	r2, r3, #7
 80030fe:	4965      	ldr	r1, [pc, #404]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	4313      	orrs	r3, r2
 8003104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003106:	4b63      	ldr	r3, [pc, #396]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d001      	beq.n	8003118 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0b8      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d020      	beq.n	8003166 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d005      	beq.n	800313c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003130:	4b59      	ldr	r3, [pc, #356]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	4a58      	ldr	r2, [pc, #352]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800313a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0308 	and.w	r3, r3, #8
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003148:	4b53      	ldr	r3, [pc, #332]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4a52      	ldr	r2, [pc, #328]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800314e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003152:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003154:	4b50      	ldr	r3, [pc, #320]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	494d      	ldr	r1, [pc, #308]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d040      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d107      	bne.n	800318a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800317a:	4b47      	ldr	r3, [pc, #284]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	2b00      	cmp	r3, #0
 8003184:	d115      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e07f      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	2b02      	cmp	r3, #2
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b41      	ldr	r3, [pc, #260]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e073      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3d      	ldr	r3, [pc, #244]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e06b      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b39      	ldr	r3, [pc, #228]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4936      	ldr	r1, [pc, #216]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fe f9b0 	bl	8001528 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fe f9ac 	bl	8001528 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e053      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2d      	ldr	r3, [pc, #180]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d210      	bcs.n	8003224 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 0207 	bic.w	r2, r3, #7
 800320a:	4922      	ldr	r1, [pc, #136]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	4313      	orrs	r3, r2
 8003210:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003212:	4b20      	ldr	r3, [pc, #128]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	429a      	cmp	r2, r3
 800321e:	d001      	beq.n	8003224 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e032      	b.n	800328a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0304 	and.w	r3, r3, #4
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003230:	4b19      	ldr	r3, [pc, #100]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	4916      	ldr	r1, [pc, #88]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800323e:	4313      	orrs	r3, r2
 8003240:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0308 	and.w	r3, r3, #8
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324e:	4b12      	ldr	r3, [pc, #72]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	00db      	lsls	r3, r3, #3
 800325c:	490e      	ldr	r1, [pc, #56]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800325e:	4313      	orrs	r3, r2
 8003260:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003262:	f000 f821 	bl	80032a8 <HAL_RCC_GetSysClockFreq>
 8003266:	4602      	mov	r2, r0
 8003268:	4b0b      	ldr	r3, [pc, #44]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	490a      	ldr	r1, [pc, #40]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003274:	5ccb      	ldrb	r3, [r1, r3]
 8003276:	fa22 f303 	lsr.w	r3, r2, r3
 800327a:	4a09      	ldr	r2, [pc, #36]	; (80032a0 <HAL_RCC_ClockConfig+0x1cc>)
 800327c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327e:	4b09      	ldr	r3, [pc, #36]	; (80032a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe f90e 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	3710      	adds	r7, #16
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40022000 	.word	0x40022000
 8003298:	40021000 	.word	0x40021000
 800329c:	080051cc 	.word	0x080051cc
 80032a0:	20000008 	.word	0x20000008
 80032a4:	2000000c 	.word	0x2000000c

080032a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a8:	b490      	push	{r4, r7}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80032ae:	4b2a      	ldr	r3, [pc, #168]	; (8003358 <HAL_RCC_GetSysClockFreq+0xb0>)
 80032b0:	1d3c      	adds	r4, r7, #4
 80032b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80032b8:	f240 2301 	movw	r3, #513	; 0x201
 80032bc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
 80032c6:	2300      	movs	r3, #0
 80032c8:	627b      	str	r3, [r7, #36]	; 0x24
 80032ca:	2300      	movs	r3, #0
 80032cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80032ce:	2300      	movs	r3, #0
 80032d0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032d2:	4b22      	ldr	r3, [pc, #136]	; (800335c <HAL_RCC_GetSysClockFreq+0xb4>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d002      	beq.n	80032e8 <HAL_RCC_GetSysClockFreq+0x40>
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d003      	beq.n	80032ee <HAL_RCC_GetSysClockFreq+0x46>
 80032e6:	e02d      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032e8:	4b1d      	ldr	r3, [pc, #116]	; (8003360 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032ea:	623b      	str	r3, [r7, #32]
      break;
 80032ec:	e02d      	b.n	800334a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80032fa:	4413      	add	r3, r2
 80032fc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003300:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d013      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800330c:	4b13      	ldr	r3, [pc, #76]	; (800335c <HAL_RCC_GetSysClockFreq+0xb4>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	0c5b      	lsrs	r3, r3, #17
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800331a:	4413      	add	r3, r2
 800331c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003320:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	4a0e      	ldr	r2, [pc, #56]	; (8003360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003326:	fb02 f203 	mul.w	r2, r2, r3
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003330:	627b      	str	r3, [r7, #36]	; 0x24
 8003332:	e004      	b.n	800333e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	4a0b      	ldr	r2, [pc, #44]	; (8003364 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003338:	fb02 f303 	mul.w	r3, r2, r3
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800333e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003340:	623b      	str	r3, [r7, #32]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003346:	623b      	str	r3, [r7, #32]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	6a3b      	ldr	r3, [r7, #32]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3728      	adds	r7, #40	; 0x28
 8003350:	46bd      	mov	sp, r7
 8003352:	bc90      	pop	{r4, r7}
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	080051bc 	.word	0x080051bc
 800335c:	40021000 	.word	0x40021000
 8003360:	007a1200 	.word	0x007a1200
 8003364:	003d0900 	.word	0x003d0900

08003368 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800336c:	4b02      	ldr	r3, [pc, #8]	; (8003378 <HAL_RCC_GetHCLKFreq+0x10>)
 800336e:	681b      	ldr	r3, [r3, #0]
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	bc80      	pop	{r7}
 8003376:	4770      	bx	lr
 8003378:	20000008 	.word	0x20000008

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003380:	f7ff fff2 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40021000 	.word	0x40021000
 80033a0:	080051dc 	.word	0x080051dc

080033a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033a8:	f7ff ffde 	bl	8003368 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	0adb      	lsrs	r3, r3, #11
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	; (80033c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40021000 	.word	0x40021000
 80033c8:	080051dc 	.word	0x080051dc

080033cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b085      	sub	sp, #20
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033d4:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <RCC_Delay+0x34>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <RCC_Delay+0x38>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	0a5b      	lsrs	r3, r3, #9
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	fb02 f303 	mul.w	r3, r2, r3
 80033e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033e8:	bf00      	nop
  }
  while (Delay --);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e5a      	subs	r2, r3, #1
 80033ee:	60fa      	str	r2, [r7, #12]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f9      	bne.n	80033e8 <RCC_Delay+0x1c>
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bc80      	pop	{r7}
 80033fe:	4770      	bx	lr
 8003400:	20000008 	.word	0x20000008
 8003404:	10624dd3 	.word	0x10624dd3

08003408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e041      	b.n	800349e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d106      	bne.n	8003434 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7fd fe4e 	bl	80010d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2202      	movs	r2, #2
 8003438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3304      	adds	r3, #4
 8003444:	4619      	mov	r1, r3
 8003446:	4610      	mov	r0, r2
 8003448:	f000 fa7a 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3708      	adds	r7, #8
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
	...

080034a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d001      	beq.n	80034c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e03a      	b.n	8003536 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a18      	ldr	r2, [pc, #96]	; (8003540 <HAL_TIM_Base_Start_IT+0x98>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d00e      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x58>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d009      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x58>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_TIM_Base_Start_IT+0x9c>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d004      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x58>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a13      	ldr	r2, [pc, #76]	; (8003548 <HAL_TIM_Base_Start_IT+0xa0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d111      	bne.n	8003524 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	f003 0307 	and.w	r3, r3, #7
 800350a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d010      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003522:	e007      	b.n	8003534 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	bc80      	pop	{r7}
 800353e:	4770      	bx	lr
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800

0800354c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b02      	cmp	r3, #2
 8003560:	d122      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d11b      	bne.n	80035a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0202 	mvn.w	r2, #2
 8003578:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	f003 0303 	and.w	r3, r3, #3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d003      	beq.n	8003596 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800358e:	6878      	ldr	r0, [r7, #4]
 8003590:	f000 f9ba 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003594:	e005      	b.n	80035a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 f9ad 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 f9bc 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	f003 0304 	and.w	r3, r3, #4
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d122      	bne.n	80035fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d11b      	bne.n	80035fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0204 	mvn.w	r2, #4
 80035cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2202      	movs	r2, #2
 80035d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f990 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 80035e8:	e005      	b.n	80035f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f983 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f000 f992 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0308 	and.w	r3, r3, #8
 8003606:	2b08      	cmp	r3, #8
 8003608:	d122      	bne.n	8003650 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b08      	cmp	r3, #8
 8003616:	d11b      	bne.n	8003650 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0208 	mvn.w	r2, #8
 8003620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2204      	movs	r2, #4
 8003626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	69db      	ldr	r3, [r3, #28]
 800362e:	f003 0303 	and.w	r3, r3, #3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f966 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 800363c:	e005      	b.n	800364a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 f959 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f968 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	2b10      	cmp	r3, #16
 800365c:	d122      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	f003 0310 	and.w	r3, r3, #16
 8003668:	2b10      	cmp	r3, #16
 800366a:	d11b      	bne.n	80036a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f06f 0210 	mvn.w	r2, #16
 8003674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2208      	movs	r2, #8
 800367a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f93c 	bl	8003908 <HAL_TIM_IC_CaptureCallback>
 8003690:	e005      	b.n	800369e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f92f 	bl	80038f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 f93e 	bl	800391a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d10e      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f003 0301 	and.w	r3, r3, #1
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d107      	bne.n	80036d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f06f 0201 	mvn.w	r2, #1
 80036c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f90a 	bl	80038e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036da:	2b80      	cmp	r3, #128	; 0x80
 80036dc:	d10e      	bne.n	80036fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036e8:	2b80      	cmp	r3, #128	; 0x80
 80036ea:	d107      	bne.n	80036fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80036f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fa81 	bl	8003bfe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d10e      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003714:	2b40      	cmp	r3, #64	; 0x40
 8003716:	d107      	bne.n	8003728 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003720:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f902 	bl	800392c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b20      	cmp	r3, #32
 8003734:	d10e      	bne.n	8003754 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	f003 0320 	and.w	r3, r3, #32
 8003740:	2b20      	cmp	r3, #32
 8003742:	d107      	bne.n	8003754 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f06f 0220 	mvn.w	r2, #32
 800374c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fa4c 	bl	8003bec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003754:	bf00      	nop
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376c:	2b01      	cmp	r3, #1
 800376e:	d101      	bne.n	8003774 <HAL_TIM_ConfigClockSource+0x18>
 8003770:	2302      	movs	r3, #2
 8003772:	e0b3      	b.n	80038dc <HAL_TIM_ConfigClockSource+0x180>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003792:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800379a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ac:	d03e      	beq.n	800382c <HAL_TIM_ConfigClockSource+0xd0>
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b2:	f200 8087 	bhi.w	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ba:	f000 8085 	beq.w	80038c8 <HAL_TIM_ConfigClockSource+0x16c>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	d87f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037c4:	2b70      	cmp	r3, #112	; 0x70
 80037c6:	d01a      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0xa2>
 80037c8:	2b70      	cmp	r3, #112	; 0x70
 80037ca:	d87b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d050      	beq.n	8003872 <HAL_TIM_ConfigClockSource+0x116>
 80037d0:	2b60      	cmp	r3, #96	; 0x60
 80037d2:	d877      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d03c      	beq.n	8003852 <HAL_TIM_ConfigClockSource+0xf6>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d873      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d058      	beq.n	8003892 <HAL_TIM_ConfigClockSource+0x136>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d86f      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d064      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
 80037e8:	2b30      	cmp	r3, #48	; 0x30
 80037ea:	d86b      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d060      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d867      	bhi.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d05c      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d05a      	beq.n	80038b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80037fc:	e062      	b.n	80038c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6899      	ldr	r1, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f000 f970 	bl	8003af2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003820:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68fa      	ldr	r2, [r7, #12]
 8003828:	609a      	str	r2, [r3, #8]
      break;
 800382a:	e04e      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6818      	ldr	r0, [r3, #0]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	6899      	ldr	r1, [r3, #8]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	f000 f959 	bl	8003af2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800384e:	609a      	str	r2, [r3, #8]
      break;
 8003850:	e03b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	6859      	ldr	r1, [r3, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	461a      	mov	r2, r3
 8003860:	f000 f8d0 	bl	8003a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2150      	movs	r1, #80	; 0x50
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f927 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003870:	e02b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6818      	ldr	r0, [r3, #0]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	6859      	ldr	r1, [r3, #4]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	461a      	mov	r2, r3
 8003880:	f000 f8ee 	bl	8003a60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2160      	movs	r1, #96	; 0x60
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f917 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 8003890:	e01b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6818      	ldr	r0, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	461a      	mov	r2, r3
 80038a0:	f000 f8b0 	bl	8003a04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 f907 	bl	8003abe <TIM_ITRx_SetConfig>
      break;
 80038b0:	e00b      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f000 f8fe 	bl	8003abe <TIM_ITRx_SetConfig>
        break;
 80038c2:	e002      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038c4:	bf00      	nop
 80038c6:	e000      	b.n	80038ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80038c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80038ec:	bf00      	nop
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bc80      	pop	{r7}
 80038f4:	4770      	bx	lr

080038f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038f6:	b480      	push	{r7}
 80038f8:	b083      	sub	sp, #12
 80038fa:	af00      	add	r7, sp, #0
 80038fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038fe:	bf00      	nop
 8003900:	370c      	adds	r7, #12
 8003902:	46bd      	mov	sp, r7
 8003904:	bc80      	pop	{r7}
 8003906:	4770      	bx	lr

08003908 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003908:	b480      	push	{r7}
 800390a:	b083      	sub	sp, #12
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003910:	bf00      	nop
 8003912:	370c      	adds	r7, #12
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800391a:	b480      	push	{r7}
 800391c:	b083      	sub	sp, #12
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	bc80      	pop	{r7}
 800392a:	4770      	bx	lr

0800392c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr
	...

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a29      	ldr	r2, [pc, #164]	; (80039f8 <TIM_Base_SetConfig+0xb8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d00b      	beq.n	8003970 <TIM_Base_SetConfig+0x30>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d007      	beq.n	8003970 <TIM_Base_SetConfig+0x30>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a26      	ldr	r2, [pc, #152]	; (80039fc <TIM_Base_SetConfig+0xbc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d003      	beq.n	8003970 <TIM_Base_SetConfig+0x30>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a25      	ldr	r2, [pc, #148]	; (8003a00 <TIM_Base_SetConfig+0xc0>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d108      	bne.n	8003982 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <TIM_Base_SetConfig+0xb8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d00b      	beq.n	80039a2 <TIM_Base_SetConfig+0x62>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003990:	d007      	beq.n	80039a2 <TIM_Base_SetConfig+0x62>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a19      	ldr	r2, [pc, #100]	; (80039fc <TIM_Base_SetConfig+0xbc>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d003      	beq.n	80039a2 <TIM_Base_SetConfig+0x62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a18      	ldr	r2, [pc, #96]	; (8003a00 <TIM_Base_SetConfig+0xc0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d108      	bne.n	80039b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <TIM_Base_SetConfig+0xb8>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d103      	bne.n	80039e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	615a      	str	r2, [r3, #20]
}
 80039ee:	bf00      	nop
 80039f0:	3714      	adds	r7, #20
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bc80      	pop	{r7}
 80039f6:	4770      	bx	lr
 80039f8:	40012c00 	.word	0x40012c00
 80039fc:	40000400 	.word	0x40000400
 8003a00:	40000800 	.word	0x40000800

08003a04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f023 0201 	bic.w	r2, r3, #1
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f023 030a 	bic.w	r3, r3, #10
 8003a40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	621a      	str	r2, [r3, #32]
}
 8003a56:	bf00      	nop
 8003a58:	371c      	adds	r7, #28
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	bc80      	pop	{r7}
 8003a5e:	4770      	bx	lr

08003a60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b087      	sub	sp, #28
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a1b      	ldr	r3, [r3, #32]
 8003a70:	f023 0210 	bic.w	r2, r3, #16
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
 8003a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a8a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	031b      	lsls	r3, r3, #12
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a9c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	621a      	str	r2, [r3, #32]
}
 8003ab4:	bf00      	nop
 8003ab6:	371c      	adds	r7, #28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bc80      	pop	{r7}
 8003abc:	4770      	bx	lr

08003abe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ad4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ad6:	683a      	ldr	r2, [r7, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f043 0307 	orr.w	r3, r3, #7
 8003ae0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	609a      	str	r2, [r3, #8]
}
 8003ae8:	bf00      	nop
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b087      	sub	sp, #28
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
 8003afe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	021a      	lsls	r2, r3, #8
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	431a      	orrs	r2, r3
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	609a      	str	r2, [r3, #8]
}
 8003b26:	bf00      	nop
 8003b28:	371c      	adds	r7, #28
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr

08003b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e046      	b.n	8003bd6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b94:	d009      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a12      	ldr	r2, [pc, #72]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a10      	ldr	r2, [pc, #64]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d10c      	bne.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr
 8003be0:	40012c00 	.word	0x40012c00
 8003be4:	40000400 	.word	0x40000400
 8003be8:	40000800 	.word	0x40000800

08003bec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bf4:	bf00      	nop
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bc80      	pop	{r7}
 8003bfc:	4770      	bx	lr

08003bfe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bc80      	pop	{r7}
 8003c0e:	4770      	bx	lr

08003c10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e03f      	b.n	8003ca2 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7fd fa8a 	bl	8001150 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2224      	movs	r2, #36	; 0x24
 8003c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68da      	ldr	r2, [r3, #12]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fcc7 	bl	80045e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	691a      	ldr	r2, [r3, #16]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695a      	ldr	r2, [r3, #20]
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b08a      	sub	sp, #40	; 0x28
 8003cae:	af02      	add	r7, sp, #8
 8003cb0:	60f8      	str	r0, [r7, #12]
 8003cb2:	60b9      	str	r1, [r7, #8]
 8003cb4:	603b      	str	r3, [r7, #0]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	d17c      	bne.n	8003dc4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d002      	beq.n	8003cd6 <HAL_UART_Transmit+0x2c>
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d101      	bne.n	8003cda <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e075      	b.n	8003dc6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Transmit+0x3e>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e06e      	b.n	8003dc6 <HAL_UART_Transmit+0x11c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2221      	movs	r2, #33	; 0x21
 8003cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cfe:	f7fd fc13 	bl	8001528 <HAL_GetTick>
 8003d02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	88fa      	ldrh	r2, [r7, #6]
 8003d08:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	88fa      	ldrh	r2, [r7, #6]
 8003d0e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d108      	bne.n	8003d2c <HAL_UART_Transmit+0x82>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	e003      	b.n	8003d34 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d30:	2300      	movs	r3, #0
 8003d32:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d3c:	e02a      	b.n	8003d94 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	9300      	str	r3, [sp, #0]
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2200      	movs	r2, #0
 8003d46:	2180      	movs	r1, #128	; 0x80
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fab3 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e036      	b.n	8003dc6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10b      	bne.n	8003d76 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	461a      	mov	r2, r3
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d6c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	3302      	adds	r3, #2
 8003d72:	61bb      	str	r3, [r7, #24]
 8003d74:	e007      	b.n	8003d86 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	3301      	adds	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1cf      	bne.n	8003d3e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	9300      	str	r3, [sp, #0]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2200      	movs	r2, #0
 8003da6:	2140      	movs	r1, #64	; 0x40
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 fa83 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d001      	beq.n	8003db8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e006      	b.n	8003dc6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2220      	movs	r2, #32
 8003dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	e000      	b.n	8003dc6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dc4:	2302      	movs	r3, #2
  }
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3720      	adds	r7, #32
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b08a      	sub	sp, #40	; 0x28
 8003dd2:	af02      	add	r7, sp, #8
 8003dd4:	60f8      	str	r0, [r7, #12]
 8003dd6:	60b9      	str	r1, [r7, #8]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	f040 808c 	bne.w	8003f08 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <HAL_UART_Receive+0x2e>
 8003df6:	88fb      	ldrh	r3, [r7, #6]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e084      	b.n	8003f0a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d101      	bne.n	8003e0e <HAL_UART_Receive+0x40>
 8003e0a:	2302      	movs	r3, #2
 8003e0c:	e07d      	b.n	8003f0a <HAL_UART_Receive+0x13c>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2222      	movs	r2, #34	; 0x22
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2200      	movs	r2, #0
 8003e28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e2a:	f7fd fb7d 	bl	8001528 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	88fa      	ldrh	r2, [r7, #6]
 8003e34:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	88fa      	ldrh	r2, [r7, #6]
 8003e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e44:	d108      	bne.n	8003e58 <HAL_UART_Receive+0x8a>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e003      	b.n	8003e60 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003e68:	e043      	b.n	8003ef2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2200      	movs	r2, #0
 8003e72:	2120      	movs	r1, #32
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fa1d 	bl	80042b4 <UART_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e042      	b.n	8003f0a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d10c      	bne.n	8003ea4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003e9c:	69bb      	ldr	r3, [r7, #24]
 8003e9e:	3302      	adds	r3, #2
 8003ea0:	61bb      	str	r3, [r7, #24]
 8003ea2:	e01f      	b.n	8003ee4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eac:	d007      	beq.n	8003ebe <HAL_UART_Receive+0xf0>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_UART_Receive+0xfe>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	701a      	strb	r2, [r3, #0]
 8003eca:	e008      	b.n	8003ede <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	3b01      	subs	r3, #1
 8003eec:	b29a      	uxth	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1b6      	bne.n	8003e6a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10d      	bne.n	8003f66 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <HAL_UART_IRQHandler+0x52>
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	f003 0320 	and.w	r3, r3, #32
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa99 	bl	8004496 <UART_Receive_IT>
      return;
 8003f64:	e17b      	b.n	800425e <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80b1 	beq.w	80040d0 <HAL_UART_IRQHandler+0x1bc>
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_UART_IRQHandler+0x70>
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80a6 	beq.w	80040d0 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x90>
 8003f8e:	6a3b      	ldr	r3, [r7, #32]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	f043 0201 	orr.w	r2, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00a      	beq.n	8003fc4 <HAL_UART_IRQHandler+0xb0>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f003 0301 	and.w	r3, r3, #1
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d005      	beq.n	8003fc4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_UART_IRQHandler+0xd0>
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d005      	beq.n	8003fe4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f043 0204 	orr.w	r2, r3, #4
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe6:	f003 0308 	and.w	r3, r3, #8
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00f      	beq.n	800400e <HAL_UART_IRQHandler+0xfa>
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d104      	bne.n	8004002 <HAL_UART_IRQHandler+0xee>
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d005      	beq.n	800400e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f043 0208 	orr.w	r2, r3, #8
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 811e 	beq.w	8004254 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	f003 0320 	and.w	r3, r3, #32
 800401e:	2b00      	cmp	r3, #0
 8004020:	d007      	beq.n	8004032 <HAL_UART_IRQHandler+0x11e>
 8004022:	6a3b      	ldr	r3, [r7, #32]
 8004024:	f003 0320 	and.w	r3, r3, #32
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 fa32 	bl	8004496 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	695b      	ldr	r3, [r3, #20]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b00      	cmp	r3, #0
 800403e:	bf14      	ite	ne
 8004040:	2301      	movne	r3, #1
 8004042:	2300      	moveq	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d102      	bne.n	800405a <HAL_UART_IRQHandler+0x146>
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d031      	beq.n	80040be <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f974 	bl	8004348 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d023      	beq.n	80040b6 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800407c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d013      	beq.n	80040ae <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408a:	4a76      	ldr	r2, [pc, #472]	; (8004264 <HAL_UART_IRQHandler+0x350>)
 800408c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004092:	4618      	mov	r0, r3
 8004094:	f7fd fbbe 	bl	8001814 <HAL_DMA_Abort_IT>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d016      	beq.n	80040cc <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040a8:	4610      	mov	r0, r2
 80040aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e00e      	b.n	80040cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8ec 	bl	800428c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	e00a      	b.n	80040cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8e8 	bl	800428c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	e006      	b.n	80040cc <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f8e4 	bl	800428c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80040ca:	e0c3      	b.n	8004254 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040cc:	bf00      	nop
    return;
 80040ce:	e0c1      	b.n	8004254 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	f040 80a1 	bne.w	800421c <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 809b 	beq.w	800421c <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f003 0310 	and.w	r3, r3, #16
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8095 	beq.w	800421c <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60fb      	str	r3, [r7, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d04e      	beq.n	80041b4 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004120:	8a3b      	ldrh	r3, [r7, #16]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 8098 	beq.w	8004258 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800412c:	8a3a      	ldrh	r2, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	f080 8092 	bcs.w	8004258 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8a3a      	ldrh	r2, [r7, #16]
 8004138:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b20      	cmp	r3, #32
 8004142:	d02b      	beq.n	800419c <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004152:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	695a      	ldr	r2, [r3, #20]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f022 0201 	bic.w	r2, r2, #1
 8004162:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004172:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 0210 	bic.w	r2, r2, #16
 8004190:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fb01 	bl	800179e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	b29b      	uxth	r3, r3
 80041aa:	4619      	mov	r1, r3
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f876 	bl	800429e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80041b2:	e051      	b.n	8004258 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041bc:	b29b      	uxth	r3, r3
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d047      	beq.n	800425c <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80041cc:	8a7b      	ldrh	r3, [r7, #18]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d044      	beq.n	800425c <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68da      	ldr	r2, [r3, #12]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80041e0:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	695a      	ldr	r2, [r3, #20]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68da      	ldr	r2, [r3, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f022 0210 	bic.w	r2, r2, #16
 800420e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004210:	8a7b      	ldrh	r3, [r7, #18]
 8004212:	4619      	mov	r1, r3
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f842 	bl	800429e <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800421a:	e01f      	b.n	800425c <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800421c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004222:	2b00      	cmp	r3, #0
 8004224:	d008      	beq.n	8004238 <HAL_UART_IRQHandler+0x324>
 8004226:	6a3b      	ldr	r3, [r7, #32]
 8004228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004230:	6878      	ldr	r0, [r7, #4]
 8004232:	f000 f8c9 	bl	80043c8 <UART_Transmit_IT>
    return;
 8004236:	e012      	b.n	800425e <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00d      	beq.n	800425e <HAL_UART_IRQHandler+0x34a>
 8004242:	6a3b      	ldr	r3, [r7, #32]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d008      	beq.n	800425e <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f90a 	bl	8004466 <UART_EndTransmit_IT>
    return;
 8004252:	e004      	b.n	800425e <HAL_UART_IRQHandler+0x34a>
    return;
 8004254:	bf00      	nop
 8004256:	e002      	b.n	800425e <HAL_UART_IRQHandler+0x34a>
      return;
 8004258:	bf00      	nop
 800425a:	e000      	b.n	800425e <HAL_UART_IRQHandler+0x34a>
      return;
 800425c:	bf00      	nop
  }
}
 800425e:	3728      	adds	r7, #40	; 0x28
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	080043a1 	.word	0x080043a1

08004268 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004270:	bf00      	nop
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	bc80      	pop	{r7}
 800428a:	4770      	bx	lr

0800428c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004294:	bf00      	nop
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	bc80      	pop	{r7}
 800429c:	4770      	bx	lr

0800429e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	460b      	mov	r3, r1
 80042a8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bc80      	pop	{r7}
 80042b2:	4770      	bx	lr

080042b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	603b      	str	r3, [r7, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c4:	e02c      	b.n	8004320 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042cc:	d028      	beq.n	8004320 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d4:	f7fd f928 	bl	8001528 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d21d      	bcs.n	8004320 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68da      	ldr	r2, [r3, #12]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695a      	ldr	r2, [r3, #20]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e00f      	b.n	8004340 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4013      	ands	r3, r2
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	429a      	cmp	r2, r3
 800432e:	bf0c      	ite	eq
 8004330:	2301      	moveq	r3, #1
 8004332:	2300      	movne	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	429a      	cmp	r2, r3
 800433c:	d0c3      	beq.n	80042c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800435e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	695a      	ldr	r2, [r3, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0201 	bic.w	r2, r2, #1
 800436e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	2b01      	cmp	r3, #1
 8004376:	d107      	bne.n	8004388 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68da      	ldr	r2, [r3, #12]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0210 	bic.w	r2, r2, #16
 8004386:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004396:	bf00      	nop
 8004398:	370c      	adds	r7, #12
 800439a:	46bd      	mov	sp, r7
 800439c:	bc80      	pop	{r7}
 800439e:	4770      	bx	lr

080043a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80043ba:	68f8      	ldr	r0, [r7, #12]
 80043bc:	f7ff ff66 	bl	800428c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b21      	cmp	r3, #33	; 0x21
 80043da:	d13e      	bne.n	800445a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043e4:	d114      	bne.n	8004410 <UART_Transmit_IT+0x48>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d110      	bne.n	8004410 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a1b      	ldr	r3, [r3, #32]
 80043f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004402:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a1b      	ldr	r3, [r3, #32]
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	621a      	str	r2, [r3, #32]
 800440e:	e008      	b.n	8004422 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a1b      	ldr	r3, [r3, #32]
 8004414:	1c59      	adds	r1, r3, #1
 8004416:	687a      	ldr	r2, [r7, #4]
 8004418:	6211      	str	r1, [r2, #32]
 800441a:	781a      	ldrb	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29b      	uxth	r3, r3
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	4619      	mov	r1, r3
 8004430:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004432:	2b00      	cmp	r3, #0
 8004434:	d10f      	bne.n	8004456 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68da      	ldr	r2, [r3, #12]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004444:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68da      	ldr	r2, [r3, #12]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004454:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800447c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff feee 	bl	8004268 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}

08004496 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004496:	b580      	push	{r7, lr}
 8004498:	b086      	sub	sp, #24
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	2b22      	cmp	r3, #34	; 0x22
 80044a8:	f040 8099 	bne.w	80045de <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044b4:	d117      	bne.n	80044e6 <UART_Receive_IT+0x50>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d113      	bne.n	80044e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044c6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	1c9a      	adds	r2, r3, #2
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	629a      	str	r2, [r3, #40]	; 0x28
 80044e4:	e026      	b.n	8004534 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044f8:	d007      	beq.n	800450a <UART_Receive_IT+0x74>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d10a      	bne.n	8004518 <UART_Receive_IT+0x82>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d106      	bne.n	8004518 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	b2da      	uxtb	r2, r3
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	701a      	strb	r2, [r3, #0]
 8004516:	e008      	b.n	800452a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004524:	b2da      	uxtb	r2, r3
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004538:	b29b      	uxth	r3, r3
 800453a:	3b01      	subs	r3, #1
 800453c:	b29b      	uxth	r3, r3
 800453e:	687a      	ldr	r2, [r7, #4]
 8004540:	4619      	mov	r1, r3
 8004542:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004544:	2b00      	cmp	r3, #0
 8004546:	d148      	bne.n	80045da <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 0220 	bic.w	r2, r2, #32
 8004556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68da      	ldr	r2, [r3, #12]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004566:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0201 	bic.w	r2, r2, #1
 8004576:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	2b01      	cmp	r3, #1
 8004586:	d123      	bne.n	80045d0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0210 	bic.w	r2, r2, #16
 800459c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0310 	and.w	r3, r3, #16
 80045a8:	2b10      	cmp	r3, #16
 80045aa:	d10a      	bne.n	80045c2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80045ac:	2300      	movs	r3, #0
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fe68 	bl	800429e <HAL_UARTEx_RxEventCallback>
 80045ce:	e002      	b.n	80045d6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f7ff fe52 	bl	800427a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e002      	b.n	80045e0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	430a      	orrs	r2, r1
 8004604:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004622:	f023 030c 	bic.w	r3, r3, #12
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	430b      	orrs	r3, r1
 800462e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	699a      	ldr	r2, [r3, #24]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a2c      	ldr	r2, [pc, #176]	; (80046fc <UART_SetConfig+0x114>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d103      	bne.n	8004658 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004650:	f7fe fea8 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	e002      	b.n	800465e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004658:	f7fe fe90 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 800465c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009a      	lsls	r2, r3, #2
 8004668:	441a      	add	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	4a22      	ldr	r2, [pc, #136]	; (8004700 <UART_SetConfig+0x118>)
 8004676:	fba2 2303 	umull	r2, r3, r2, r3
 800467a:	095b      	lsrs	r3, r3, #5
 800467c:	0119      	lsls	r1, r3, #4
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4613      	mov	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	4413      	add	r3, r2
 8004686:	009a      	lsls	r2, r3, #2
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fbb2 f2f3 	udiv	r2, r2, r3
 8004694:	4b1a      	ldr	r3, [pc, #104]	; (8004700 <UART_SetConfig+0x118>)
 8004696:	fba3 0302 	umull	r0, r3, r3, r2
 800469a:	095b      	lsrs	r3, r3, #5
 800469c:	2064      	movs	r0, #100	; 0x64
 800469e:	fb00 f303 	mul.w	r3, r0, r3
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	3332      	adds	r3, #50	; 0x32
 80046a8:	4a15      	ldr	r2, [pc, #84]	; (8004700 <UART_SetConfig+0x118>)
 80046aa:	fba2 2303 	umull	r2, r3, r2, r3
 80046ae:	095b      	lsrs	r3, r3, #5
 80046b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b4:	4419      	add	r1, r3
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009a      	lsls	r2, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046cc:	4b0c      	ldr	r3, [pc, #48]	; (8004700 <UART_SetConfig+0x118>)
 80046ce:	fba3 0302 	umull	r0, r3, r3, r2
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	2064      	movs	r0, #100	; 0x64
 80046d6:	fb00 f303 	mul.w	r3, r0, r3
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	3332      	adds	r3, #50	; 0x32
 80046e0:	4a07      	ldr	r2, [pc, #28]	; (8004700 <UART_SetConfig+0x118>)
 80046e2:	fba2 2303 	umull	r2, r3, r2, r3
 80046e6:	095b      	lsrs	r3, r3, #5
 80046e8:	f003 020f 	and.w	r2, r3, #15
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	440a      	add	r2, r1
 80046f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	40013800 	.word	0x40013800
 8004700:	51eb851f 	.word	0x51eb851f

08004704 <__errno>:
 8004704:	4b01      	ldr	r3, [pc, #4]	; (800470c <__errno+0x8>)
 8004706:	6818      	ldr	r0, [r3, #0]
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	20000014 	.word	0x20000014

08004710 <__libc_init_array>:
 8004710:	b570      	push	{r4, r5, r6, lr}
 8004712:	2600      	movs	r6, #0
 8004714:	4d0c      	ldr	r5, [pc, #48]	; (8004748 <__libc_init_array+0x38>)
 8004716:	4c0d      	ldr	r4, [pc, #52]	; (800474c <__libc_init_array+0x3c>)
 8004718:	1b64      	subs	r4, r4, r5
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	42a6      	cmp	r6, r4
 800471e:	d109      	bne.n	8004734 <__libc_init_array+0x24>
 8004720:	f000 fc5c 	bl	8004fdc <_init>
 8004724:	2600      	movs	r6, #0
 8004726:	4d0a      	ldr	r5, [pc, #40]	; (8004750 <__libc_init_array+0x40>)
 8004728:	4c0a      	ldr	r4, [pc, #40]	; (8004754 <__libc_init_array+0x44>)
 800472a:	1b64      	subs	r4, r4, r5
 800472c:	10a4      	asrs	r4, r4, #2
 800472e:	42a6      	cmp	r6, r4
 8004730:	d105      	bne.n	800473e <__libc_init_array+0x2e>
 8004732:	bd70      	pop	{r4, r5, r6, pc}
 8004734:	f855 3b04 	ldr.w	r3, [r5], #4
 8004738:	4798      	blx	r3
 800473a:	3601      	adds	r6, #1
 800473c:	e7ee      	b.n	800471c <__libc_init_array+0xc>
 800473e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004742:	4798      	blx	r3
 8004744:	3601      	adds	r6, #1
 8004746:	e7f2      	b.n	800472e <__libc_init_array+0x1e>
 8004748:	08005218 	.word	0x08005218
 800474c:	08005218 	.word	0x08005218
 8004750:	08005218 	.word	0x08005218
 8004754:	0800521c 	.word	0x0800521c

08004758 <memset>:
 8004758:	4603      	mov	r3, r0
 800475a:	4402      	add	r2, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	d100      	bne.n	8004762 <memset+0xa>
 8004760:	4770      	bx	lr
 8004762:	f803 1b01 	strb.w	r1, [r3], #1
 8004766:	e7f9      	b.n	800475c <memset+0x4>

08004768 <siprintf>:
 8004768:	b40e      	push	{r1, r2, r3}
 800476a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800476e:	b500      	push	{lr}
 8004770:	b09c      	sub	sp, #112	; 0x70
 8004772:	ab1d      	add	r3, sp, #116	; 0x74
 8004774:	9002      	str	r0, [sp, #8]
 8004776:	9006      	str	r0, [sp, #24]
 8004778:	9107      	str	r1, [sp, #28]
 800477a:	9104      	str	r1, [sp, #16]
 800477c:	4808      	ldr	r0, [pc, #32]	; (80047a0 <siprintf+0x38>)
 800477e:	4909      	ldr	r1, [pc, #36]	; (80047a4 <siprintf+0x3c>)
 8004780:	f853 2b04 	ldr.w	r2, [r3], #4
 8004784:	9105      	str	r1, [sp, #20]
 8004786:	6800      	ldr	r0, [r0, #0]
 8004788:	a902      	add	r1, sp, #8
 800478a:	9301      	str	r3, [sp, #4]
 800478c:	f000 f868 	bl	8004860 <_svfiprintf_r>
 8004790:	2200      	movs	r2, #0
 8004792:	9b02      	ldr	r3, [sp, #8]
 8004794:	701a      	strb	r2, [r3, #0]
 8004796:	b01c      	add	sp, #112	; 0x70
 8004798:	f85d eb04 	ldr.w	lr, [sp], #4
 800479c:	b003      	add	sp, #12
 800479e:	4770      	bx	lr
 80047a0:	20000014 	.word	0x20000014
 80047a4:	ffff0208 	.word	0xffff0208

080047a8 <__ssputs_r>:
 80047a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047ac:	688e      	ldr	r6, [r1, #8]
 80047ae:	4682      	mov	sl, r0
 80047b0:	429e      	cmp	r6, r3
 80047b2:	460c      	mov	r4, r1
 80047b4:	4690      	mov	r8, r2
 80047b6:	461f      	mov	r7, r3
 80047b8:	d838      	bhi.n	800482c <__ssputs_r+0x84>
 80047ba:	898a      	ldrh	r2, [r1, #12]
 80047bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047c0:	d032      	beq.n	8004828 <__ssputs_r+0x80>
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	6909      	ldr	r1, [r1, #16]
 80047c6:	3301      	adds	r3, #1
 80047c8:	eba5 0901 	sub.w	r9, r5, r1
 80047cc:	6965      	ldr	r5, [r4, #20]
 80047ce:	444b      	add	r3, r9
 80047d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d8:	106d      	asrs	r5, r5, #1
 80047da:	429d      	cmp	r5, r3
 80047dc:	bf38      	it	cc
 80047de:	461d      	movcc	r5, r3
 80047e0:	0553      	lsls	r3, r2, #21
 80047e2:	d531      	bpl.n	8004848 <__ssputs_r+0xa0>
 80047e4:	4629      	mov	r1, r5
 80047e6:	f000 fb53 	bl	8004e90 <_malloc_r>
 80047ea:	4606      	mov	r6, r0
 80047ec:	b950      	cbnz	r0, 8004804 <__ssputs_r+0x5c>
 80047ee:	230c      	movs	r3, #12
 80047f0:	f04f 30ff 	mov.w	r0, #4294967295
 80047f4:	f8ca 3000 	str.w	r3, [sl]
 80047f8:	89a3      	ldrh	r3, [r4, #12]
 80047fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004804:	464a      	mov	r2, r9
 8004806:	6921      	ldr	r1, [r4, #16]
 8004808:	f000 face 	bl	8004da8 <memcpy>
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004816:	81a3      	strh	r3, [r4, #12]
 8004818:	6126      	str	r6, [r4, #16]
 800481a:	444e      	add	r6, r9
 800481c:	6026      	str	r6, [r4, #0]
 800481e:	463e      	mov	r6, r7
 8004820:	6165      	str	r5, [r4, #20]
 8004822:	eba5 0509 	sub.w	r5, r5, r9
 8004826:	60a5      	str	r5, [r4, #8]
 8004828:	42be      	cmp	r6, r7
 800482a:	d900      	bls.n	800482e <__ssputs_r+0x86>
 800482c:	463e      	mov	r6, r7
 800482e:	4632      	mov	r2, r6
 8004830:	4641      	mov	r1, r8
 8004832:	6820      	ldr	r0, [r4, #0]
 8004834:	f000 fac6 	bl	8004dc4 <memmove>
 8004838:	68a3      	ldr	r3, [r4, #8]
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	1b9b      	subs	r3, r3, r6
 800483e:	4432      	add	r2, r6
 8004840:	2000      	movs	r0, #0
 8004842:	60a3      	str	r3, [r4, #8]
 8004844:	6022      	str	r2, [r4, #0]
 8004846:	e7db      	b.n	8004800 <__ssputs_r+0x58>
 8004848:	462a      	mov	r2, r5
 800484a:	f000 fb7b 	bl	8004f44 <_realloc_r>
 800484e:	4606      	mov	r6, r0
 8004850:	2800      	cmp	r0, #0
 8004852:	d1e1      	bne.n	8004818 <__ssputs_r+0x70>
 8004854:	4650      	mov	r0, sl
 8004856:	6921      	ldr	r1, [r4, #16]
 8004858:	f000 face 	bl	8004df8 <_free_r>
 800485c:	e7c7      	b.n	80047ee <__ssputs_r+0x46>
	...

08004860 <_svfiprintf_r>:
 8004860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004864:	4698      	mov	r8, r3
 8004866:	898b      	ldrh	r3, [r1, #12]
 8004868:	4607      	mov	r7, r0
 800486a:	061b      	lsls	r3, r3, #24
 800486c:	460d      	mov	r5, r1
 800486e:	4614      	mov	r4, r2
 8004870:	b09d      	sub	sp, #116	; 0x74
 8004872:	d50e      	bpl.n	8004892 <_svfiprintf_r+0x32>
 8004874:	690b      	ldr	r3, [r1, #16]
 8004876:	b963      	cbnz	r3, 8004892 <_svfiprintf_r+0x32>
 8004878:	2140      	movs	r1, #64	; 0x40
 800487a:	f000 fb09 	bl	8004e90 <_malloc_r>
 800487e:	6028      	str	r0, [r5, #0]
 8004880:	6128      	str	r0, [r5, #16]
 8004882:	b920      	cbnz	r0, 800488e <_svfiprintf_r+0x2e>
 8004884:	230c      	movs	r3, #12
 8004886:	603b      	str	r3, [r7, #0]
 8004888:	f04f 30ff 	mov.w	r0, #4294967295
 800488c:	e0d1      	b.n	8004a32 <_svfiprintf_r+0x1d2>
 800488e:	2340      	movs	r3, #64	; 0x40
 8004890:	616b      	str	r3, [r5, #20]
 8004892:	2300      	movs	r3, #0
 8004894:	9309      	str	r3, [sp, #36]	; 0x24
 8004896:	2320      	movs	r3, #32
 8004898:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800489c:	2330      	movs	r3, #48	; 0x30
 800489e:	f04f 0901 	mov.w	r9, #1
 80048a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a4c <_svfiprintf_r+0x1ec>
 80048aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048ae:	4623      	mov	r3, r4
 80048b0:	469a      	mov	sl, r3
 80048b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b6:	b10a      	cbz	r2, 80048bc <_svfiprintf_r+0x5c>
 80048b8:	2a25      	cmp	r2, #37	; 0x25
 80048ba:	d1f9      	bne.n	80048b0 <_svfiprintf_r+0x50>
 80048bc:	ebba 0b04 	subs.w	fp, sl, r4
 80048c0:	d00b      	beq.n	80048da <_svfiprintf_r+0x7a>
 80048c2:	465b      	mov	r3, fp
 80048c4:	4622      	mov	r2, r4
 80048c6:	4629      	mov	r1, r5
 80048c8:	4638      	mov	r0, r7
 80048ca:	f7ff ff6d 	bl	80047a8 <__ssputs_r>
 80048ce:	3001      	adds	r0, #1
 80048d0:	f000 80aa 	beq.w	8004a28 <_svfiprintf_r+0x1c8>
 80048d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d6:	445a      	add	r2, fp
 80048d8:	9209      	str	r2, [sp, #36]	; 0x24
 80048da:	f89a 3000 	ldrb.w	r3, [sl]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f000 80a2 	beq.w	8004a28 <_svfiprintf_r+0x1c8>
 80048e4:	2300      	movs	r3, #0
 80048e6:	f04f 32ff 	mov.w	r2, #4294967295
 80048ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ee:	f10a 0a01 	add.w	sl, sl, #1
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	9307      	str	r3, [sp, #28]
 80048f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048fa:	931a      	str	r3, [sp, #104]	; 0x68
 80048fc:	4654      	mov	r4, sl
 80048fe:	2205      	movs	r2, #5
 8004900:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004904:	4851      	ldr	r0, [pc, #324]	; (8004a4c <_svfiprintf_r+0x1ec>)
 8004906:	f000 fa41 	bl	8004d8c <memchr>
 800490a:	9a04      	ldr	r2, [sp, #16]
 800490c:	b9d8      	cbnz	r0, 8004946 <_svfiprintf_r+0xe6>
 800490e:	06d0      	lsls	r0, r2, #27
 8004910:	bf44      	itt	mi
 8004912:	2320      	movmi	r3, #32
 8004914:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004918:	0711      	lsls	r1, r2, #28
 800491a:	bf44      	itt	mi
 800491c:	232b      	movmi	r3, #43	; 0x2b
 800491e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004922:	f89a 3000 	ldrb.w	r3, [sl]
 8004926:	2b2a      	cmp	r3, #42	; 0x2a
 8004928:	d015      	beq.n	8004956 <_svfiprintf_r+0xf6>
 800492a:	4654      	mov	r4, sl
 800492c:	2000      	movs	r0, #0
 800492e:	f04f 0c0a 	mov.w	ip, #10
 8004932:	9a07      	ldr	r2, [sp, #28]
 8004934:	4621      	mov	r1, r4
 8004936:	f811 3b01 	ldrb.w	r3, [r1], #1
 800493a:	3b30      	subs	r3, #48	; 0x30
 800493c:	2b09      	cmp	r3, #9
 800493e:	d94e      	bls.n	80049de <_svfiprintf_r+0x17e>
 8004940:	b1b0      	cbz	r0, 8004970 <_svfiprintf_r+0x110>
 8004942:	9207      	str	r2, [sp, #28]
 8004944:	e014      	b.n	8004970 <_svfiprintf_r+0x110>
 8004946:	eba0 0308 	sub.w	r3, r0, r8
 800494a:	fa09 f303 	lsl.w	r3, r9, r3
 800494e:	4313      	orrs	r3, r2
 8004950:	46a2      	mov	sl, r4
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	e7d2      	b.n	80048fc <_svfiprintf_r+0x9c>
 8004956:	9b03      	ldr	r3, [sp, #12]
 8004958:	1d19      	adds	r1, r3, #4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	9103      	str	r1, [sp, #12]
 800495e:	2b00      	cmp	r3, #0
 8004960:	bfbb      	ittet	lt
 8004962:	425b      	neglt	r3, r3
 8004964:	f042 0202 	orrlt.w	r2, r2, #2
 8004968:	9307      	strge	r3, [sp, #28]
 800496a:	9307      	strlt	r3, [sp, #28]
 800496c:	bfb8      	it	lt
 800496e:	9204      	strlt	r2, [sp, #16]
 8004970:	7823      	ldrb	r3, [r4, #0]
 8004972:	2b2e      	cmp	r3, #46	; 0x2e
 8004974:	d10c      	bne.n	8004990 <_svfiprintf_r+0x130>
 8004976:	7863      	ldrb	r3, [r4, #1]
 8004978:	2b2a      	cmp	r3, #42	; 0x2a
 800497a:	d135      	bne.n	80049e8 <_svfiprintf_r+0x188>
 800497c:	9b03      	ldr	r3, [sp, #12]
 800497e:	3402      	adds	r4, #2
 8004980:	1d1a      	adds	r2, r3, #4
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	9203      	str	r2, [sp, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	bfb8      	it	lt
 800498a:	f04f 33ff 	movlt.w	r3, #4294967295
 800498e:	9305      	str	r3, [sp, #20]
 8004990:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004a5c <_svfiprintf_r+0x1fc>
 8004994:	2203      	movs	r2, #3
 8004996:	4650      	mov	r0, sl
 8004998:	7821      	ldrb	r1, [r4, #0]
 800499a:	f000 f9f7 	bl	8004d8c <memchr>
 800499e:	b140      	cbz	r0, 80049b2 <_svfiprintf_r+0x152>
 80049a0:	2340      	movs	r3, #64	; 0x40
 80049a2:	eba0 000a 	sub.w	r0, r0, sl
 80049a6:	fa03 f000 	lsl.w	r0, r3, r0
 80049aa:	9b04      	ldr	r3, [sp, #16]
 80049ac:	3401      	adds	r4, #1
 80049ae:	4303      	orrs	r3, r0
 80049b0:	9304      	str	r3, [sp, #16]
 80049b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b6:	2206      	movs	r2, #6
 80049b8:	4825      	ldr	r0, [pc, #148]	; (8004a50 <_svfiprintf_r+0x1f0>)
 80049ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049be:	f000 f9e5 	bl	8004d8c <memchr>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d038      	beq.n	8004a38 <_svfiprintf_r+0x1d8>
 80049c6:	4b23      	ldr	r3, [pc, #140]	; (8004a54 <_svfiprintf_r+0x1f4>)
 80049c8:	bb1b      	cbnz	r3, 8004a12 <_svfiprintf_r+0x1b2>
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	3307      	adds	r3, #7
 80049ce:	f023 0307 	bic.w	r3, r3, #7
 80049d2:	3308      	adds	r3, #8
 80049d4:	9303      	str	r3, [sp, #12]
 80049d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d8:	4433      	add	r3, r6
 80049da:	9309      	str	r3, [sp, #36]	; 0x24
 80049dc:	e767      	b.n	80048ae <_svfiprintf_r+0x4e>
 80049de:	460c      	mov	r4, r1
 80049e0:	2001      	movs	r0, #1
 80049e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e6:	e7a5      	b.n	8004934 <_svfiprintf_r+0xd4>
 80049e8:	2300      	movs	r3, #0
 80049ea:	f04f 0c0a 	mov.w	ip, #10
 80049ee:	4619      	mov	r1, r3
 80049f0:	3401      	adds	r4, #1
 80049f2:	9305      	str	r3, [sp, #20]
 80049f4:	4620      	mov	r0, r4
 80049f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049fa:	3a30      	subs	r2, #48	; 0x30
 80049fc:	2a09      	cmp	r2, #9
 80049fe:	d903      	bls.n	8004a08 <_svfiprintf_r+0x1a8>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0c5      	beq.n	8004990 <_svfiprintf_r+0x130>
 8004a04:	9105      	str	r1, [sp, #20]
 8004a06:	e7c3      	b.n	8004990 <_svfiprintf_r+0x130>
 8004a08:	4604      	mov	r4, r0
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a10:	e7f0      	b.n	80049f4 <_svfiprintf_r+0x194>
 8004a12:	ab03      	add	r3, sp, #12
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	462a      	mov	r2, r5
 8004a18:	4638      	mov	r0, r7
 8004a1a:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <_svfiprintf_r+0x1f8>)
 8004a1c:	a904      	add	r1, sp, #16
 8004a1e:	f3af 8000 	nop.w
 8004a22:	1c42      	adds	r2, r0, #1
 8004a24:	4606      	mov	r6, r0
 8004a26:	d1d6      	bne.n	80049d6 <_svfiprintf_r+0x176>
 8004a28:	89ab      	ldrh	r3, [r5, #12]
 8004a2a:	065b      	lsls	r3, r3, #25
 8004a2c:	f53f af2c 	bmi.w	8004888 <_svfiprintf_r+0x28>
 8004a30:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a32:	b01d      	add	sp, #116	; 0x74
 8004a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a38:	ab03      	add	r3, sp, #12
 8004a3a:	9300      	str	r3, [sp, #0]
 8004a3c:	462a      	mov	r2, r5
 8004a3e:	4638      	mov	r0, r7
 8004a40:	4b05      	ldr	r3, [pc, #20]	; (8004a58 <_svfiprintf_r+0x1f8>)
 8004a42:	a904      	add	r1, sp, #16
 8004a44:	f000 f87c 	bl	8004b40 <_printf_i>
 8004a48:	e7eb      	b.n	8004a22 <_svfiprintf_r+0x1c2>
 8004a4a:	bf00      	nop
 8004a4c:	080051e4 	.word	0x080051e4
 8004a50:	080051ee 	.word	0x080051ee
 8004a54:	00000000 	.word	0x00000000
 8004a58:	080047a9 	.word	0x080047a9
 8004a5c:	080051ea 	.word	0x080051ea

08004a60 <_printf_common>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4616      	mov	r6, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	688a      	ldr	r2, [r1, #8]
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	bfb8      	it	lt
 8004a72:	4613      	movlt	r3, r2
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a7a:	460c      	mov	r4, r1
 8004a7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a80:	b10a      	cbz	r2, 8004a86 <_printf_common+0x26>
 8004a82:	3301      	adds	r3, #1
 8004a84:	6033      	str	r3, [r6, #0]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	0699      	lsls	r1, r3, #26
 8004a8a:	bf42      	ittt	mi
 8004a8c:	6833      	ldrmi	r3, [r6, #0]
 8004a8e:	3302      	addmi	r3, #2
 8004a90:	6033      	strmi	r3, [r6, #0]
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	f015 0506 	ands.w	r5, r5, #6
 8004a98:	d106      	bne.n	8004aa8 <_printf_common+0x48>
 8004a9a:	f104 0a19 	add.w	sl, r4, #25
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	6832      	ldr	r2, [r6, #0]
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	dc28      	bgt.n	8004afa <_printf_common+0x9a>
 8004aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aac:	1e13      	subs	r3, r2, #0
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	0692      	lsls	r2, r2, #26
 8004ab6:	d42d      	bmi.n	8004b14 <_printf_common+0xb4>
 8004ab8:	4649      	mov	r1, r9
 8004aba:	4638      	mov	r0, r7
 8004abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac0:	47c0      	blx	r8
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d020      	beq.n	8004b08 <_printf_common+0xa8>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	68e5      	ldr	r5, [r4, #12]
 8004aca:	f003 0306 	and.w	r3, r3, #6
 8004ace:	2b04      	cmp	r3, #4
 8004ad0:	bf18      	it	ne
 8004ad2:	2500      	movne	r5, #0
 8004ad4:	6832      	ldr	r2, [r6, #0]
 8004ad6:	f04f 0600 	mov.w	r6, #0
 8004ada:	68a3      	ldr	r3, [r4, #8]
 8004adc:	bf08      	it	eq
 8004ade:	1aad      	subeq	r5, r5, r2
 8004ae0:	6922      	ldr	r2, [r4, #16]
 8004ae2:	bf08      	it	eq
 8004ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	bfc4      	itt	gt
 8004aec:	1a9b      	subgt	r3, r3, r2
 8004aee:	18ed      	addgt	r5, r5, r3
 8004af0:	341a      	adds	r4, #26
 8004af2:	42b5      	cmp	r5, r6
 8004af4:	d11a      	bne.n	8004b2c <_printf_common+0xcc>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e008      	b.n	8004b0c <_printf_common+0xac>
 8004afa:	2301      	movs	r3, #1
 8004afc:	4652      	mov	r2, sl
 8004afe:	4649      	mov	r1, r9
 8004b00:	4638      	mov	r0, r7
 8004b02:	47c0      	blx	r8
 8004b04:	3001      	adds	r0, #1
 8004b06:	d103      	bne.n	8004b10 <_printf_common+0xb0>
 8004b08:	f04f 30ff 	mov.w	r0, #4294967295
 8004b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b10:	3501      	adds	r5, #1
 8004b12:	e7c4      	b.n	8004a9e <_printf_common+0x3e>
 8004b14:	2030      	movs	r0, #48	; 0x30
 8004b16:	18e1      	adds	r1, r4, r3
 8004b18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1c:	1c5a      	adds	r2, r3, #1
 8004b1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b22:	4422      	add	r2, r4
 8004b24:	3302      	adds	r3, #2
 8004b26:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b2a:	e7c5      	b.n	8004ab8 <_printf_common+0x58>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	4622      	mov	r2, r4
 8004b30:	4649      	mov	r1, r9
 8004b32:	4638      	mov	r0, r7
 8004b34:	47c0      	blx	r8
 8004b36:	3001      	adds	r0, #1
 8004b38:	d0e6      	beq.n	8004b08 <_printf_common+0xa8>
 8004b3a:	3601      	adds	r6, #1
 8004b3c:	e7d9      	b.n	8004af2 <_printf_common+0x92>
	...

08004b40 <_printf_i>:
 8004b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b44:	460c      	mov	r4, r1
 8004b46:	7e27      	ldrb	r7, [r4, #24]
 8004b48:	4691      	mov	r9, r2
 8004b4a:	2f78      	cmp	r7, #120	; 0x78
 8004b4c:	4680      	mov	r8, r0
 8004b4e:	469a      	mov	sl, r3
 8004b50:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b56:	d807      	bhi.n	8004b68 <_printf_i+0x28>
 8004b58:	2f62      	cmp	r7, #98	; 0x62
 8004b5a:	d80a      	bhi.n	8004b72 <_printf_i+0x32>
 8004b5c:	2f00      	cmp	r7, #0
 8004b5e:	f000 80d9 	beq.w	8004d14 <_printf_i+0x1d4>
 8004b62:	2f58      	cmp	r7, #88	; 0x58
 8004b64:	f000 80a4 	beq.w	8004cb0 <_printf_i+0x170>
 8004b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b70:	e03a      	b.n	8004be8 <_printf_i+0xa8>
 8004b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b76:	2b15      	cmp	r3, #21
 8004b78:	d8f6      	bhi.n	8004b68 <_printf_i+0x28>
 8004b7a:	a001      	add	r0, pc, #4	; (adr r0, 8004b80 <_printf_i+0x40>)
 8004b7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b80:	08004bd9 	.word	0x08004bd9
 8004b84:	08004bed 	.word	0x08004bed
 8004b88:	08004b69 	.word	0x08004b69
 8004b8c:	08004b69 	.word	0x08004b69
 8004b90:	08004b69 	.word	0x08004b69
 8004b94:	08004b69 	.word	0x08004b69
 8004b98:	08004bed 	.word	0x08004bed
 8004b9c:	08004b69 	.word	0x08004b69
 8004ba0:	08004b69 	.word	0x08004b69
 8004ba4:	08004b69 	.word	0x08004b69
 8004ba8:	08004b69 	.word	0x08004b69
 8004bac:	08004cfb 	.word	0x08004cfb
 8004bb0:	08004c1d 	.word	0x08004c1d
 8004bb4:	08004cdd 	.word	0x08004cdd
 8004bb8:	08004b69 	.word	0x08004b69
 8004bbc:	08004b69 	.word	0x08004b69
 8004bc0:	08004d1d 	.word	0x08004d1d
 8004bc4:	08004b69 	.word	0x08004b69
 8004bc8:	08004c1d 	.word	0x08004c1d
 8004bcc:	08004b69 	.word	0x08004b69
 8004bd0:	08004b69 	.word	0x08004b69
 8004bd4:	08004ce5 	.word	0x08004ce5
 8004bd8:	680b      	ldr	r3, [r1, #0]
 8004bda:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	600a      	str	r2, [r1, #0]
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	2301      	movs	r3, #1
 8004bea:	e0a4      	b.n	8004d36 <_printf_i+0x1f6>
 8004bec:	6825      	ldr	r5, [r4, #0]
 8004bee:	6808      	ldr	r0, [r1, #0]
 8004bf0:	062e      	lsls	r6, r5, #24
 8004bf2:	f100 0304 	add.w	r3, r0, #4
 8004bf6:	d50a      	bpl.n	8004c0e <_printf_i+0xce>
 8004bf8:	6805      	ldr	r5, [r0, #0]
 8004bfa:	600b      	str	r3, [r1, #0]
 8004bfc:	2d00      	cmp	r5, #0
 8004bfe:	da03      	bge.n	8004c08 <_printf_i+0xc8>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	426d      	negs	r5, r5
 8004c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c08:	230a      	movs	r3, #10
 8004c0a:	485e      	ldr	r0, [pc, #376]	; (8004d84 <_printf_i+0x244>)
 8004c0c:	e019      	b.n	8004c42 <_printf_i+0x102>
 8004c0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004c12:	6805      	ldr	r5, [r0, #0]
 8004c14:	600b      	str	r3, [r1, #0]
 8004c16:	bf18      	it	ne
 8004c18:	b22d      	sxthne	r5, r5
 8004c1a:	e7ef      	b.n	8004bfc <_printf_i+0xbc>
 8004c1c:	680b      	ldr	r3, [r1, #0]
 8004c1e:	6825      	ldr	r5, [r4, #0]
 8004c20:	1d18      	adds	r0, r3, #4
 8004c22:	6008      	str	r0, [r1, #0]
 8004c24:	0628      	lsls	r0, r5, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xec>
 8004c28:	681d      	ldr	r5, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xf2>
 8004c2c:	0669      	lsls	r1, r5, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe8>
 8004c30:	881d      	ldrh	r5, [r3, #0]
 8004c32:	2f6f      	cmp	r7, #111	; 0x6f
 8004c34:	bf0c      	ite	eq
 8004c36:	2308      	moveq	r3, #8
 8004c38:	230a      	movne	r3, #10
 8004c3a:	4852      	ldr	r0, [pc, #328]	; (8004d84 <_printf_i+0x244>)
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6866      	ldr	r6, [r4, #4]
 8004c44:	2e00      	cmp	r6, #0
 8004c46:	bfa8      	it	ge
 8004c48:	6821      	ldrge	r1, [r4, #0]
 8004c4a:	60a6      	str	r6, [r4, #8]
 8004c4c:	bfa4      	itt	ge
 8004c4e:	f021 0104 	bicge.w	r1, r1, #4
 8004c52:	6021      	strge	r1, [r4, #0]
 8004c54:	b90d      	cbnz	r5, 8004c5a <_printf_i+0x11a>
 8004c56:	2e00      	cmp	r6, #0
 8004c58:	d04d      	beq.n	8004cf6 <_printf_i+0x1b6>
 8004c5a:	4616      	mov	r6, r2
 8004c5c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c60:	fb03 5711 	mls	r7, r3, r1, r5
 8004c64:	5dc7      	ldrb	r7, [r0, r7]
 8004c66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c6a:	462f      	mov	r7, r5
 8004c6c:	42bb      	cmp	r3, r7
 8004c6e:	460d      	mov	r5, r1
 8004c70:	d9f4      	bls.n	8004c5c <_printf_i+0x11c>
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d10b      	bne.n	8004c8e <_printf_i+0x14e>
 8004c76:	6823      	ldr	r3, [r4, #0]
 8004c78:	07df      	lsls	r7, r3, #31
 8004c7a:	d508      	bpl.n	8004c8e <_printf_i+0x14e>
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	6861      	ldr	r1, [r4, #4]
 8004c80:	4299      	cmp	r1, r3
 8004c82:	bfde      	ittt	le
 8004c84:	2330      	movle	r3, #48	; 0x30
 8004c86:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c8a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c8e:	1b92      	subs	r2, r2, r6
 8004c90:	6122      	str	r2, [r4, #16]
 8004c92:	464b      	mov	r3, r9
 8004c94:	4621      	mov	r1, r4
 8004c96:	4640      	mov	r0, r8
 8004c98:	f8cd a000 	str.w	sl, [sp]
 8004c9c:	aa03      	add	r2, sp, #12
 8004c9e:	f7ff fedf 	bl	8004a60 <_printf_common>
 8004ca2:	3001      	adds	r0, #1
 8004ca4:	d14c      	bne.n	8004d40 <_printf_i+0x200>
 8004ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8004caa:	b004      	add	sp, #16
 8004cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cb0:	4834      	ldr	r0, [pc, #208]	; (8004d84 <_printf_i+0x244>)
 8004cb2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cb6:	680e      	ldr	r6, [r1, #0]
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	f856 5b04 	ldr.w	r5, [r6], #4
 8004cbe:	061f      	lsls	r7, r3, #24
 8004cc0:	600e      	str	r6, [r1, #0]
 8004cc2:	d514      	bpl.n	8004cee <_printf_i+0x1ae>
 8004cc4:	07d9      	lsls	r1, r3, #31
 8004cc6:	bf44      	itt	mi
 8004cc8:	f043 0320 	orrmi.w	r3, r3, #32
 8004ccc:	6023      	strmi	r3, [r4, #0]
 8004cce:	b91d      	cbnz	r5, 8004cd8 <_printf_i+0x198>
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	f023 0320 	bic.w	r3, r3, #32
 8004cd6:	6023      	str	r3, [r4, #0]
 8004cd8:	2310      	movs	r3, #16
 8004cda:	e7af      	b.n	8004c3c <_printf_i+0xfc>
 8004cdc:	6823      	ldr	r3, [r4, #0]
 8004cde:	f043 0320 	orr.w	r3, r3, #32
 8004ce2:	6023      	str	r3, [r4, #0]
 8004ce4:	2378      	movs	r3, #120	; 0x78
 8004ce6:	4828      	ldr	r0, [pc, #160]	; (8004d88 <_printf_i+0x248>)
 8004ce8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cec:	e7e3      	b.n	8004cb6 <_printf_i+0x176>
 8004cee:	065e      	lsls	r6, r3, #25
 8004cf0:	bf48      	it	mi
 8004cf2:	b2ad      	uxthmi	r5, r5
 8004cf4:	e7e6      	b.n	8004cc4 <_printf_i+0x184>
 8004cf6:	4616      	mov	r6, r2
 8004cf8:	e7bb      	b.n	8004c72 <_printf_i+0x132>
 8004cfa:	680b      	ldr	r3, [r1, #0]
 8004cfc:	6826      	ldr	r6, [r4, #0]
 8004cfe:	1d1d      	adds	r5, r3, #4
 8004d00:	6960      	ldr	r0, [r4, #20]
 8004d02:	600d      	str	r5, [r1, #0]
 8004d04:	0635      	lsls	r5, r6, #24
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	d501      	bpl.n	8004d0e <_printf_i+0x1ce>
 8004d0a:	6018      	str	r0, [r3, #0]
 8004d0c:	e002      	b.n	8004d14 <_printf_i+0x1d4>
 8004d0e:	0671      	lsls	r1, r6, #25
 8004d10:	d5fb      	bpl.n	8004d0a <_printf_i+0x1ca>
 8004d12:	8018      	strh	r0, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	4616      	mov	r6, r2
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	e7ba      	b.n	8004c92 <_printf_i+0x152>
 8004d1c:	680b      	ldr	r3, [r1, #0]
 8004d1e:	1d1a      	adds	r2, r3, #4
 8004d20:	600a      	str	r2, [r1, #0]
 8004d22:	681e      	ldr	r6, [r3, #0]
 8004d24:	2100      	movs	r1, #0
 8004d26:	4630      	mov	r0, r6
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	f000 f82f 	bl	8004d8c <memchr>
 8004d2e:	b108      	cbz	r0, 8004d34 <_printf_i+0x1f4>
 8004d30:	1b80      	subs	r0, r0, r6
 8004d32:	6060      	str	r0, [r4, #4]
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	6123      	str	r3, [r4, #16]
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3e:	e7a8      	b.n	8004c92 <_printf_i+0x152>
 8004d40:	4632      	mov	r2, r6
 8004d42:	4649      	mov	r1, r9
 8004d44:	4640      	mov	r0, r8
 8004d46:	6923      	ldr	r3, [r4, #16]
 8004d48:	47d0      	blx	sl
 8004d4a:	3001      	adds	r0, #1
 8004d4c:	d0ab      	beq.n	8004ca6 <_printf_i+0x166>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	079b      	lsls	r3, r3, #30
 8004d52:	d413      	bmi.n	8004d7c <_printf_i+0x23c>
 8004d54:	68e0      	ldr	r0, [r4, #12]
 8004d56:	9b03      	ldr	r3, [sp, #12]
 8004d58:	4298      	cmp	r0, r3
 8004d5a:	bfb8      	it	lt
 8004d5c:	4618      	movlt	r0, r3
 8004d5e:	e7a4      	b.n	8004caa <_printf_i+0x16a>
 8004d60:	2301      	movs	r3, #1
 8004d62:	4632      	mov	r2, r6
 8004d64:	4649      	mov	r1, r9
 8004d66:	4640      	mov	r0, r8
 8004d68:	47d0      	blx	sl
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d09b      	beq.n	8004ca6 <_printf_i+0x166>
 8004d6e:	3501      	adds	r5, #1
 8004d70:	68e3      	ldr	r3, [r4, #12]
 8004d72:	9903      	ldr	r1, [sp, #12]
 8004d74:	1a5b      	subs	r3, r3, r1
 8004d76:	42ab      	cmp	r3, r5
 8004d78:	dcf2      	bgt.n	8004d60 <_printf_i+0x220>
 8004d7a:	e7eb      	b.n	8004d54 <_printf_i+0x214>
 8004d7c:	2500      	movs	r5, #0
 8004d7e:	f104 0619 	add.w	r6, r4, #25
 8004d82:	e7f5      	b.n	8004d70 <_printf_i+0x230>
 8004d84:	080051f5 	.word	0x080051f5
 8004d88:	08005206 	.word	0x08005206

08004d8c <memchr>:
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	b510      	push	{r4, lr}
 8004d90:	b2c9      	uxtb	r1, r1
 8004d92:	4402      	add	r2, r0
 8004d94:	4293      	cmp	r3, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	d101      	bne.n	8004d9e <memchr+0x12>
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	e003      	b.n	8004da6 <memchr+0x1a>
 8004d9e:	7804      	ldrb	r4, [r0, #0]
 8004da0:	3301      	adds	r3, #1
 8004da2:	428c      	cmp	r4, r1
 8004da4:	d1f6      	bne.n	8004d94 <memchr+0x8>
 8004da6:	bd10      	pop	{r4, pc}

08004da8 <memcpy>:
 8004da8:	440a      	add	r2, r1
 8004daa:	4291      	cmp	r1, r2
 8004dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8004db0:	d100      	bne.n	8004db4 <memcpy+0xc>
 8004db2:	4770      	bx	lr
 8004db4:	b510      	push	{r4, lr}
 8004db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dba:	4291      	cmp	r1, r2
 8004dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dc0:	d1f9      	bne.n	8004db6 <memcpy+0xe>
 8004dc2:	bd10      	pop	{r4, pc}

08004dc4 <memmove>:
 8004dc4:	4288      	cmp	r0, r1
 8004dc6:	b510      	push	{r4, lr}
 8004dc8:	eb01 0402 	add.w	r4, r1, r2
 8004dcc:	d902      	bls.n	8004dd4 <memmove+0x10>
 8004dce:	4284      	cmp	r4, r0
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	d807      	bhi.n	8004de4 <memmove+0x20>
 8004dd4:	1e43      	subs	r3, r0, #1
 8004dd6:	42a1      	cmp	r1, r4
 8004dd8:	d008      	beq.n	8004dec <memmove+0x28>
 8004dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004de2:	e7f8      	b.n	8004dd6 <memmove+0x12>
 8004de4:	4601      	mov	r1, r0
 8004de6:	4402      	add	r2, r0
 8004de8:	428a      	cmp	r2, r1
 8004dea:	d100      	bne.n	8004dee <memmove+0x2a>
 8004dec:	bd10      	pop	{r4, pc}
 8004dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004df6:	e7f7      	b.n	8004de8 <memmove+0x24>

08004df8 <_free_r>:
 8004df8:	b538      	push	{r3, r4, r5, lr}
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	2900      	cmp	r1, #0
 8004dfe:	d043      	beq.n	8004e88 <_free_r+0x90>
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f0c      	subs	r4, r1, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfb8      	it	lt
 8004e0a:	18e4      	addlt	r4, r4, r3
 8004e0c:	f000 f8d0 	bl	8004fb0 <__malloc_lock>
 8004e10:	4a1e      	ldr	r2, [pc, #120]	; (8004e8c <_free_r+0x94>)
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	4610      	mov	r0, r2
 8004e16:	b933      	cbnz	r3, 8004e26 <_free_r+0x2e>
 8004e18:	6063      	str	r3, [r4, #4]
 8004e1a:	6014      	str	r4, [r2, #0]
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e22:	f000 b8cb 	b.w	8004fbc <__malloc_unlock>
 8004e26:	42a3      	cmp	r3, r4
 8004e28:	d90a      	bls.n	8004e40 <_free_r+0x48>
 8004e2a:	6821      	ldr	r1, [r4, #0]
 8004e2c:	1862      	adds	r2, r4, r1
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	bf01      	itttt	eq
 8004e32:	681a      	ldreq	r2, [r3, #0]
 8004e34:	685b      	ldreq	r3, [r3, #4]
 8004e36:	1852      	addeq	r2, r2, r1
 8004e38:	6022      	streq	r2, [r4, #0]
 8004e3a:	6063      	str	r3, [r4, #4]
 8004e3c:	6004      	str	r4, [r0, #0]
 8004e3e:	e7ed      	b.n	8004e1c <_free_r+0x24>
 8004e40:	461a      	mov	r2, r3
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	b10b      	cbz	r3, 8004e4a <_free_r+0x52>
 8004e46:	42a3      	cmp	r3, r4
 8004e48:	d9fa      	bls.n	8004e40 <_free_r+0x48>
 8004e4a:	6811      	ldr	r1, [r2, #0]
 8004e4c:	1850      	adds	r0, r2, r1
 8004e4e:	42a0      	cmp	r0, r4
 8004e50:	d10b      	bne.n	8004e6a <_free_r+0x72>
 8004e52:	6820      	ldr	r0, [r4, #0]
 8004e54:	4401      	add	r1, r0
 8004e56:	1850      	adds	r0, r2, r1
 8004e58:	4283      	cmp	r3, r0
 8004e5a:	6011      	str	r1, [r2, #0]
 8004e5c:	d1de      	bne.n	8004e1c <_free_r+0x24>
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	4401      	add	r1, r0
 8004e64:	6011      	str	r1, [r2, #0]
 8004e66:	6053      	str	r3, [r2, #4]
 8004e68:	e7d8      	b.n	8004e1c <_free_r+0x24>
 8004e6a:	d902      	bls.n	8004e72 <_free_r+0x7a>
 8004e6c:	230c      	movs	r3, #12
 8004e6e:	602b      	str	r3, [r5, #0]
 8004e70:	e7d4      	b.n	8004e1c <_free_r+0x24>
 8004e72:	6820      	ldr	r0, [r4, #0]
 8004e74:	1821      	adds	r1, r4, r0
 8004e76:	428b      	cmp	r3, r1
 8004e78:	bf01      	itttt	eq
 8004e7a:	6819      	ldreq	r1, [r3, #0]
 8004e7c:	685b      	ldreq	r3, [r3, #4]
 8004e7e:	1809      	addeq	r1, r1, r0
 8004e80:	6021      	streq	r1, [r4, #0]
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6054      	str	r4, [r2, #4]
 8004e86:	e7c9      	b.n	8004e1c <_free_r+0x24>
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	bf00      	nop
 8004e8c:	200000a8 	.word	0x200000a8

08004e90 <_malloc_r>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	1ccd      	adds	r5, r1, #3
 8004e94:	f025 0503 	bic.w	r5, r5, #3
 8004e98:	3508      	adds	r5, #8
 8004e9a:	2d0c      	cmp	r5, #12
 8004e9c:	bf38      	it	cc
 8004e9e:	250c      	movcc	r5, #12
 8004ea0:	2d00      	cmp	r5, #0
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	db01      	blt.n	8004eaa <_malloc_r+0x1a>
 8004ea6:	42a9      	cmp	r1, r5
 8004ea8:	d903      	bls.n	8004eb2 <_malloc_r+0x22>
 8004eaa:	230c      	movs	r3, #12
 8004eac:	6033      	str	r3, [r6, #0]
 8004eae:	2000      	movs	r0, #0
 8004eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb2:	f000 f87d 	bl	8004fb0 <__malloc_lock>
 8004eb6:	4921      	ldr	r1, [pc, #132]	; (8004f3c <_malloc_r+0xac>)
 8004eb8:	680a      	ldr	r2, [r1, #0]
 8004eba:	4614      	mov	r4, r2
 8004ebc:	b99c      	cbnz	r4, 8004ee6 <_malloc_r+0x56>
 8004ebe:	4f20      	ldr	r7, [pc, #128]	; (8004f40 <_malloc_r+0xb0>)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	b923      	cbnz	r3, 8004ece <_malloc_r+0x3e>
 8004ec4:	4621      	mov	r1, r4
 8004ec6:	4630      	mov	r0, r6
 8004ec8:	f000 f862 	bl	8004f90 <_sbrk_r>
 8004ecc:	6038      	str	r0, [r7, #0]
 8004ece:	4629      	mov	r1, r5
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	f000 f85d 	bl	8004f90 <_sbrk_r>
 8004ed6:	1c43      	adds	r3, r0, #1
 8004ed8:	d123      	bne.n	8004f22 <_malloc_r+0x92>
 8004eda:	230c      	movs	r3, #12
 8004edc:	4630      	mov	r0, r6
 8004ede:	6033      	str	r3, [r6, #0]
 8004ee0:	f000 f86c 	bl	8004fbc <__malloc_unlock>
 8004ee4:	e7e3      	b.n	8004eae <_malloc_r+0x1e>
 8004ee6:	6823      	ldr	r3, [r4, #0]
 8004ee8:	1b5b      	subs	r3, r3, r5
 8004eea:	d417      	bmi.n	8004f1c <_malloc_r+0x8c>
 8004eec:	2b0b      	cmp	r3, #11
 8004eee:	d903      	bls.n	8004ef8 <_malloc_r+0x68>
 8004ef0:	6023      	str	r3, [r4, #0]
 8004ef2:	441c      	add	r4, r3
 8004ef4:	6025      	str	r5, [r4, #0]
 8004ef6:	e004      	b.n	8004f02 <_malloc_r+0x72>
 8004ef8:	6863      	ldr	r3, [r4, #4]
 8004efa:	42a2      	cmp	r2, r4
 8004efc:	bf0c      	ite	eq
 8004efe:	600b      	streq	r3, [r1, #0]
 8004f00:	6053      	strne	r3, [r2, #4]
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 f85a 	bl	8004fbc <__malloc_unlock>
 8004f08:	f104 000b 	add.w	r0, r4, #11
 8004f0c:	1d23      	adds	r3, r4, #4
 8004f0e:	f020 0007 	bic.w	r0, r0, #7
 8004f12:	1ac2      	subs	r2, r0, r3
 8004f14:	d0cc      	beq.n	8004eb0 <_malloc_r+0x20>
 8004f16:	1a1b      	subs	r3, r3, r0
 8004f18:	50a3      	str	r3, [r4, r2]
 8004f1a:	e7c9      	b.n	8004eb0 <_malloc_r+0x20>
 8004f1c:	4622      	mov	r2, r4
 8004f1e:	6864      	ldr	r4, [r4, #4]
 8004f20:	e7cc      	b.n	8004ebc <_malloc_r+0x2c>
 8004f22:	1cc4      	adds	r4, r0, #3
 8004f24:	f024 0403 	bic.w	r4, r4, #3
 8004f28:	42a0      	cmp	r0, r4
 8004f2a:	d0e3      	beq.n	8004ef4 <_malloc_r+0x64>
 8004f2c:	1a21      	subs	r1, r4, r0
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f000 f82e 	bl	8004f90 <_sbrk_r>
 8004f34:	3001      	adds	r0, #1
 8004f36:	d1dd      	bne.n	8004ef4 <_malloc_r+0x64>
 8004f38:	e7cf      	b.n	8004eda <_malloc_r+0x4a>
 8004f3a:	bf00      	nop
 8004f3c:	200000a8 	.word	0x200000a8
 8004f40:	200000ac 	.word	0x200000ac

08004f44 <_realloc_r>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	4607      	mov	r7, r0
 8004f48:	4614      	mov	r4, r2
 8004f4a:	460e      	mov	r6, r1
 8004f4c:	b921      	cbnz	r1, 8004f58 <_realloc_r+0x14>
 8004f4e:	4611      	mov	r1, r2
 8004f50:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f54:	f7ff bf9c 	b.w	8004e90 <_malloc_r>
 8004f58:	b922      	cbnz	r2, 8004f64 <_realloc_r+0x20>
 8004f5a:	f7ff ff4d 	bl	8004df8 <_free_r>
 8004f5e:	4625      	mov	r5, r4
 8004f60:	4628      	mov	r0, r5
 8004f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f64:	f000 f830 	bl	8004fc8 <_malloc_usable_size_r>
 8004f68:	42a0      	cmp	r0, r4
 8004f6a:	d20f      	bcs.n	8004f8c <_realloc_r+0x48>
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	4638      	mov	r0, r7
 8004f70:	f7ff ff8e 	bl	8004e90 <_malloc_r>
 8004f74:	4605      	mov	r5, r0
 8004f76:	2800      	cmp	r0, #0
 8004f78:	d0f2      	beq.n	8004f60 <_realloc_r+0x1c>
 8004f7a:	4631      	mov	r1, r6
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	f7ff ff13 	bl	8004da8 <memcpy>
 8004f82:	4631      	mov	r1, r6
 8004f84:	4638      	mov	r0, r7
 8004f86:	f7ff ff37 	bl	8004df8 <_free_r>
 8004f8a:	e7e9      	b.n	8004f60 <_realloc_r+0x1c>
 8004f8c:	4635      	mov	r5, r6
 8004f8e:	e7e7      	b.n	8004f60 <_realloc_r+0x1c>

08004f90 <_sbrk_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	2300      	movs	r3, #0
 8004f94:	4d05      	ldr	r5, [pc, #20]	; (8004fac <_sbrk_r+0x1c>)
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fc fa0a 	bl	80013b4 <_sbrk>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_sbrk_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_sbrk_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	200009ac 	.word	0x200009ac

08004fb0 <__malloc_lock>:
 8004fb0:	4801      	ldr	r0, [pc, #4]	; (8004fb8 <__malloc_lock+0x8>)
 8004fb2:	f000 b811 	b.w	8004fd8 <__retarget_lock_acquire_recursive>
 8004fb6:	bf00      	nop
 8004fb8:	200009b4 	.word	0x200009b4

08004fbc <__malloc_unlock>:
 8004fbc:	4801      	ldr	r0, [pc, #4]	; (8004fc4 <__malloc_unlock+0x8>)
 8004fbe:	f000 b80c 	b.w	8004fda <__retarget_lock_release_recursive>
 8004fc2:	bf00      	nop
 8004fc4:	200009b4 	.word	0x200009b4

08004fc8 <_malloc_usable_size_r>:
 8004fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fcc:	1f18      	subs	r0, r3, #4
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	bfbc      	itt	lt
 8004fd2:	580b      	ldrlt	r3, [r1, r0]
 8004fd4:	18c0      	addlt	r0, r0, r3
 8004fd6:	4770      	bx	lr

08004fd8 <__retarget_lock_acquire_recursive>:
 8004fd8:	4770      	bx	lr

08004fda <__retarget_lock_release_recursive>:
 8004fda:	4770      	bx	lr

08004fdc <_init>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr

08004fe8 <_fini>:
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fea:	bf00      	nop
 8004fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fee:	bc08      	pop	{r3}
 8004ff0:	469e      	mov	lr, r3
 8004ff2:	4770      	bx	lr
